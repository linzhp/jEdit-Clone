<!-- jEdit 3.2 Plugin Guide, (C) 2001 John Gellene            -->

<!-- jEdit buffer-local properties:                           -->
<!-- :indentSize=1:tabSize=2:noTabs=true:maxLineLen=72:       -->

<!-- Sat Jun 23 08:54:21 EDT 2001 @579 /Internet Time/        -->

<!-- This chapter of the jEdit 3.2 Plugin Guide               -->
<!-- describes the principal elements of the jEdit Plugin API -->


<chapter id="plugin-api"><title>The jEdit Plugin API</title>

<para>

This section is incomplete.

</para>

<sect1 id="api-other-resources"><title>Other Plugin Resources</title>

<para>
  There are three other types of files containing resources used by a
  plugin:
</para>

<itemizedlist>
  <listitem>
    <para>
      a catalog of the plugin's user actions in a specified XML format,
      contained in a file named <filename>actions.xml</filename>;
    </para>
  </listitem>
  <listitem>
    <para>
      one or more properties files named with a <filename>.props</filename>
      extension, each containing key-value pairs in conventional Java
      format; and
    </para>
  </listitem>
  <listitem>
    <para>
      a help file written in HTML format.
    </para>
  </listitem>
</itemizedlist>

<sect2 id="api-resources-action"><title>The User Action Catalog</title>

<para>
  User actions define procedures that can be performed by the plugin
  when it does not have input focus.  They can be executed from a menu
  item, a toolbar button or a keyboard shortcut. They can perform any
  task encompassed in a public method of any class currently loaded in
  jEdit, including plugin classes and classes of the host application.
  Among other things, they can cause the appearance and disappearance of
  the plugin's visible window.
</para>

<para>
  To manage user actions, jEdit maintains a lookup table of actions
  using descriptive strings as keys.  The values in the table are
  sets of statements written in BeanShell, jEdit's macro sriting
  language.  These scripts either direct the action themselves,
  delegate performance to a method of one of jEdit's classes that
  encapsulates the action, or do a little of both.  The scripts are
  usually short; elaborate action protocols are usually contained in
  compiled code, rather than an interpreted macro script, to speed
  execution.
</para>

<para>
  The easiest way to define user actions is the way the host application
  defines its own actions: by creating an XML file entitled
  <filename>actions.xml</filename> that will be included as one of the
  resources of the plugin's jar archive file.  The requirements of such a
  file are set forth in this document type definition:
</para>

<informalexample><programlisting>&lt;!ENTITY % att-bool '( TRUE | FALSE )' &gt;

&lt;!-- ACTIONS element --&gt;
&lt;!ELEMENT ACTIONS ( ACTION+ ) &gt;

&lt;!-- ACTION element --&gt;
&lt;!ELEMENT ACTION ( CODE | IS_SELECTED )+ &gt;
&lt;!ATTLIST ACTION
    NAME CDATA #REQUIRED
    NO_REPEAT %att-bool; "FALSE"
    NO_RECORD %att-bool; "FALSE" &gt;

&lt;!-- ACTION children --&gt;
&lt;!ELEMENT CODE ( #PCDATA ) &gt;
&lt;!ELEMENT IS_SELECTED ( #PCDATA ) &gt;
</programlisting></informalexample>

<para>
  The defined elements have the following functions:
  <itemizedlist>
    <listitem>
      <para>
        <varname>ACTIONS</varname> is the top-level element and refers
        to the set of actions used by the plugin.
      </para>
    </listitem>
    <listitem>
      <para>
        An <varname>ACTION</varname> contains the data for a particular action.
        It has three attributes: a required <varname>NAME</varname>, a flag
        indicating whether the action should not be repeated when a repeat
        command is used (<varname>NO_REPEAT</varname>) and a flag whether the
        action should be recorded if it is invoked while a user is recording a
        macro (<varname>NO_RECORD</varname>). The two flag attributs are set to
        <constant>false</constant> by default if they are not set explicitly.
      </para>
    </listitem>
    <listitem>
      <para>
        An <varname>ACTION</varname> contains two type of elements
        within it: a <varname>CODE</varname> element which specifies the
        BeanShell code that will be executed when the action is invoked,
        and an <varname>IS_SELECTED</varname> element, used for checkbox
        menu items.  The <varname>IS_SELECTED</varname> element contains
        BeanShell code that is designed to return a boolean flag that will
        determine the state of the checkbox. An <varname>ACTION</varname>
        must contain one of these elements and may contain both.
      </para>
    </listitem>
  </itemizedlist>
</para>

</sect2>

<sect2 id="api-resource-properties"><title>Plugin Properties</title>

<para>
  While the jEdit Plugin API does not absolutely require a plugin to
  have a properties file, the property format is by far the easiest way
  to provide a variety of information about the plugin to jEdit.  During
  startup, the host application loads the plugin's properties file even before
  any plugin objects are created.  The information so stored can be used
  by the plugin itself during its creation and initialization.
</para>

<para>
  The following types of plugin information are practical, if not syntatical,
  requirements of the Plugin API and are most easily supplied using
  properties:
</para>

<itemizedlist>
  <listitem>
    <para>
      Information regarding the name, author, and version of the plugin.
    </para>
    <para>
      These data should be supplied in a series of properties beginning with
      the prefix <varname>plugin.[plugin name]Plugin.</varname>.
    </para>
  </listitem>
  <listitem>
    <para>
      Identification of any dependencies the plugin may have on a
      particular version of a Java runtime environment, the jEdit
      application, or other plugins.
    </para>
  </listitem>
  <listitem>
    <para>
      The title of the plugin as displayed in a tabbed docking window or
      a floating frame window.
    </para>
  </listitem>
  <listitem>
    <para>
      Labels for user actions for inclusion in menus and option panes
      relating to toolbars and keyboard shortcuts.
    </para>
  </listitem>
  <listitem>
    <para>
      Labels and other information regarding the controls contained in
      the plugin's option pane.
    </para>
  </listitem>
  <listitem>
    <para>
      The file name of the plugin's help documentation contained in
      its jar archive file.
    </para>
  </listitem>
</itemizedlist>

</sect2>

<sect2 id="api-resources-help"><title>Plugin Documentation</title>

<para>
  While not required by the Plugin API, a help file is an essential
  element of any plugin written for public release. A single web page is
  often all that is required. There are no specific requirements on
  layout, but because of the design of jEdit's help viewer, the use of
  frames should be avoided. Topics that would be useful include
  the following:
</para>

<itemizedlist>
  <listitem>
    <para>
      a description of the purpose of the plugin;
    </para>
  </listitem>
  <listitem>
    <para>
      an explanation of the type of input the user can supply through its
      visible interface (such as mouse action or text entry in controls);
    </para>
  </listitem>
  <listitem>
    <para>
      a listing of available user actions that can be taken when the
      plugin does not have input focus;
    </para>
  </listitem>
  <listitem>
    <para>
      a summary of configuration options;
    </para>
  </listitem>
  <listitem>
    <para>
      information on development of the plugin (such as a change log,
      a list of <quote>to do</quote> items, and contact information for
      the plugin's author); and
    </para>
  </listitem>
  <listitem>
    <para>
      licensing information, including acknowledgements for any library
      software used by the plugin.
    </para>
  </listitem>
</itemizedlist>

</sect2>

</sect1>

</chapter>
