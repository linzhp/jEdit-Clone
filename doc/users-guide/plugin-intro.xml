<!-- jEdit 3.2 Plugin Guide, (C) 2001 John Gellene          -->

<!-- jEdit buffer-local properties:                         -->
<!-- :indentSize=1:tabSize=2:noTabs=true:maxLineLen=72:     -->

<!-- Fri Jun 22 00:15:01 EDT 2001 @218 /Internet Time/      -->

<!-- This is the introduction of the jEdit 3.2 Plugin Guide -->


<chapter id="plugin-intro"><title>Introducing the Plugin API</title>

<para>
  This is a guide to writing plugins for jEdit. A
  <firstterm>plugin</firstterm> is an application which is loaded and runs
  as part of another, host application. Plugins respond to user commands
  and perform tasks that supplement the host application's features.
<para>

<para>
  Like jEdit itself, plugins are written primarily
	in Java. Unavoidably, some working
	knowledge of Java is required. But if you can write a useful
  application	of any size in Java, you can write a plugin.
</para>

<para>
  The <firstterm>jEdit plugin API</firstterm> provides a framework for
  hosting plugin applications without imposing any
  requirements on the design or function of the plugin itself. You could
  write a application that performs spell checking, displays a clock or
  plays chess and turn it into a jEdit plugin. There are currently over 40
  released plugins for jEdit. While none of them play chess,
  they perform a wide variety of editing and file management tasks. A
  detailed listing of available plugins is available at the jEdit
  <ulink url="http://plugins.jedit.org">Plugin Central</ulink> web site.
</para>

<para>
  Using the plugin manager feature of jEdit, users with an
  Internet connnection can check for new or updated plugins and install
  and remove them without leaving jEdit. See <xref
  linkend="using-plugins" /> for details.
</para>

<para>
  In order to <quote>plug in</quote> to jEdit, a plugin must implement
  interfaces that deal with the following matters:
</para>

<itemizedlist>
	<listitem><para>
    Supplying information about the plugin itself, such as its name,
    version, author, and compatibility with versions of jEdit.
  </para></listitem>

	<listitem><para>
    Activating, displaying and deactivating the plugin.
  </para></listitem>

  <listitem><para>
    Providing a user interface for the plugin.
  </para>
  <para>
    While the plugin user interface can be shown in a standard
    Java top-level container
    (<classname>JWindow</classname>, <classname>JDialog</classname> or
    <classname>JFrame</classname>) in many causes it is better to use
    the jEdit dockable window API.
  </para>

  <para>
    Using the dockable window API, plugin windows can be
    configured to appear in a docking window adjacent to the main editing
    area. They can also appear as a <quote>floating</quote>, top-level frame
    window. The docking window scheme stacks plugins in sets of tabbed
    panes. A set of panes can appear above, below or to the left or right of
    the editing pane. The user controls whether and where a dockable
    window may appear.
  </para>

  <para>
    Plugins can also act directly upon jEdit's text area.  They
    can add graphical elements to the buffer text display (like error
    highlighting in the case of the ErrorList plugin) or decorations
    surrounding the text area (like the JDiff plugin's summary views).
  </para>
  </listitem>

  <listitem><para>
    Defining <glossterm>actions</glossterm> that jEdit
    will perform on behalf of the plugin upon user request.
    Actions are short snippets of BeanShell code that provide the
    <quote>glue</quote> between a plugin's user interface and
    implementation.
  </para>

  <para>
    Generally,
    plugins display their available actions in submenus of the
    <guimenu>Plugins</guimenu> menu; each menu item corresponds to
    one action. The user can also add actions to
    the tool bar and text area right-click menu, and assign them
    keyboard shortcuts.
  </para>

  </listitem>

	<listitem><para>
    Providing a range of options that the user can modify to alter the
    plugin's configuration.
  </para>

  <para>
    If a plugin provides configuration options, jEdit will make them
    available in the <guilabel>Global Options</guilabel> dialog. Each
    plugin with options is listed in the tree view in that dialog under
    <guilabel>Plugin Options</guilabel>. Clicking on the tree node for a
    plugin causes the corresponding set of options to be displayed.
  </para>
  </listitem>
</itemizedlist>

<para>
  Many of these are optional; it is possible to write a plugin that
  does not provide actions, or configuration options, or dockable
  windows, for example. The majority of plugins, plugins, however,
  provide most of the above services.
</para>

<para>
  In the following chapters,
  we will begin by briefly describing jEdit's host capabilities,
  which includes the loading and display of plugins.  Next
  we will describe the principal classes and data structures that a
  plugin must implement.  Finally, we will outline the building of a
  modest plugin, <quote>QuickNotepad</quote>, that illustrates the
  requirements and some of the techniques of jEdit plugin design.
</para>

<sidebar><title>Plugins and different jEdit versions</title>
  <para>
    The jEdit plugin API changes with each jEdit release. While the
    majority of plugins are unaffected by most changes and will continue
    working, if you want your
    plugin's user experience to be as smooth as possible, you should
    monitor the jEdit change log and mailing lists for API changes and
    update your plugin in a timely fashion.
  </para>
</sidebar>

</chapter>

