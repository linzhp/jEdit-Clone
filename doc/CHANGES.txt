JEDIT 2.5 VERSION HISTORY

* Version 2.5pre2

+ Enhancements

- User input is blocked while I/O is in progress

+ Bug Fixes

- Fixed possible EmptyStackException in View.popStatus() (since 2.5pre1)
- Possible fix for IBM JDK 1.3 for Linux NPE in
  EnhancedCheckBoxMenuItem.Model.isSelected()

* Version 2.5pre1

+ New Features

- New I/O system.
  - Multithreaded - this should improve perceived performance, and you
    can abort lengthy I/O operations
  - Supports pluggable 'virtual filesystems' which can support transparent
    loading and saving of non-local files
  - The 'File', 'Url' and 'Ftp' VFS's are included with the core. More can
    be added as plugins
  - The code is still a bit rough. User input isn't blocked while saving or
    loading, and there is no way to abort a request. This will be be fixed in
    future releases.
- Undo queue size can be set
- You can now prompt the user for input in macros; try invoking
  'Macros->Prompt User for Input' while recording
- Background mode; if jEdit is started with the -background switch, it will
  not create an initial view and instead wait for client connections. Also,
  closing all views in background mode will not exit jEdit; to exit a
  backgrounded instance, invoke 'File->Exit'.

+ Enhancements

- MARK_PREVIOUS rules are now checked for after keywords
- Function calls are highlighted in C-like modes (C, C++, Java, etc)
- Sequences with a trailing 'd', 'f', or 'l' are now highlighted as digits
- Modal dialog boxes are now centered relative to the current view
- Improved backup directory feature (Richard S. Hall)
- If the pre-load checks (if the file is a directory, if the file is readable,
  etc) fail, then jEdit will no longer create an empty buffer
- jEdit now saves it's settings when the global options dialog box is closed,
  instead of waiting until you exit
- The default focus in many dialog boxes should now be set properly
- Improved key binding handling -- the text area no longer needs to have focus
  for keyboard shortcuts to work

+ Bug Fixes

- DirectoryListSet will no longer throw exceptions if no files to search could
  be found
- Multiline tokens would not be highlighted correctly sometimes (since 2.4pre1)
- Several actions didn't check the read only flag of a buffer before making
  changes
- Sometimes when files were opened the text area wouldn't update its internal
  count of visible lines. This caused problems with scrolling
- In C-like edit modes, 'for' statements weren't indented properly
- Undos should no longer retain references to text areas which no longer
  exist
- Reloading a file would muck up HyperSearch results

+ API Changes

- BufferUpdate.LOADING removed. Use BufferUpdate.LOADED instead
- Deprecated Buffer.loadIfNecessary() method removed
- Because of the new multithreaded I/O system, plugins that assume buffers
  obtained with getBuffer() or openFile() always have valid data in them
  will no longer work. You must now either:
  - wait for all I/O requests to complete with VFSManager.waitForRequests()
    this is not recommended as it ties up the AWT thread
  - wait for the BufferUpdate.LOADED message to arrive
  - add a runnable to the I/O thread with VFSManager.runInAWTThread().
    Runnables added with this method are executed after all I/O requests
    are completed.
- jEdit.openFile() may now return a null value, if, for example, an invalid URL
  was specified. This is different from previous jEdit versions, where this
  method would always return a value.
- Plugins whose option panes don't implement the init() will no longer work.
  Previously, this method was called with reflection, but now it has been
  added to the OptionPane interface
- InputHandler and DefaultInputHandler classes moved to org.gjt.sp.jedit.gui
  package
- JEditTextArea.getInputHandler() method removed; use View.getInputHandler()
  instead
