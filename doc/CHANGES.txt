JEDIT 2.6 VERSION HISTORY

* Version 2.6pre4

+ Enhancements

- Improved abbreviations feature:
  - Abbrevs are now only expanded when a space is entered
  - Abbrevs are now only saved on exit if they were changed while
    the editor was running. This improves performance a little bit
  - Abbrev expansions can now contain newlines
  - The caret position can be specified by placing "\|" inside an abbrev
    expansion
- I/O and VFS browser improvements:
  - 'VFS Browser' and 'File Filters' option panes merged
  - New VFSUpdate message is sent when a file or a directory changes. As a
    result, VFS browsers are automatically updated when files are created
    or deleted (within jEdit)
  - When a file is added or removed, the VFS browser tree view now only
    updates the branch where the file is located, not the entire tree
  - The VFS browser now displays an error message if you attempt to execute
    more than one request simultaneously. Because the browser was not
    designed with this in mind, it would cause strange problems
- Previously, to position the caret on a specific marker or line number
  from the command line, you would write:
  jedit filename#<marker name>
  jedit filename#+<line>
  Now, you must write:
  jedit filename +marker:<marker name>
  jedit filename +line:<line>
- This is not an enhancement, but anyway: the -readonly command line
  flag has been removed
- doc/NEWS.txt written
- Documentation updates

+ Bug Fixes

- When using FTP URLs which don't specify the user name (for example,
  ftp://hostname) jEdit would prompt for the user name/password for
  every VFS operation
- FtpVFS no longer throws NullPointerExceptions when an error occurs
  while connecting to a server
- A bug in the WorkThreadPool.waitForRequests() method would cause
  HyperSearch to begin searching inside buffers before they were fully
  loaded
- The 'Up' button in the VFS browser would behave incorrectly if it was
  pressed while the current directory was a file system root
- Double-click on directory bug in 'save as' dialog box fixed yet again
- The 'New Directory' command didn't appear in the 'More' menu of the
  VFS browser
- Closing the global options dialog box while a VFS browser was open
  would reload the current directory twice

* Version 2.6pre3

+ New Features

- Window docking added to the core. This allows plugins and other windows
  to be 'docked' into views. By default, all dockable windows are shown
  in their own frames. This can be changed in Utilities->Global Options->
  Docking. This obsoletes the PluginHolder plugin.

+ Enhancements

- Previously, buffer closing and search & replace would block the GUI
  until all pending I/O was complete. Now, these commands only do it if
  it is really necessary
  the buffer _being closed_ is currently being loaded or saved
- If the default edit mode is not 'text', *.txt files are now opened in
  text mode anyway
- jEdit now remembers all FTP passwords until it is quit. To force it
  to forget passwords while it is still running, invoke Utilities->Forget
  Remote Passwords
- More VFS code cleanups
- Documentation updates

+ Bug Fixes

- Double-clicking on a directory in the 'save as' dialog box did not have
  the desired effect (since 2.6pre2)
- On some systems, File.list(), for whatever reason, returns files in the
  list, which return false when exists() is called on them. This caused NPE's
  (since 2.6pre2)
- The VFS browser would throw 'VFS session in use' errors after the
  Global Options dialog box was closed (since 2.6pre2)
- The 'Add to Favorites' button in the VFS browser would throw an NPE if the
  tree view was active (since 2.6pre2)
- The FTP VFS now resolves symlinks, so links to directories should no
  longer show up as plain files in the browser
- The DirectoryListSet would reject directories whose names didn't match
  the file name filter, and not check any files within them (since 2.6pre2)
- On some JVMs, IORequest.java would cause VerifyErrors, and as a result,
  buffers could not be loaded or saved (since 2.6pre2)
- Markers would not be loaded properly (since 2.6pre1)

+ API Changes

- Plugins that use PluginHolder to dock themselves in views will need to
  be updated to use the new API
- Plugins that dock themselves in directly (eg, BufferSelector) will need
  to be updated for the new component hierarchy

* Version 2.6pre2

+ New Features

- New file chooser. Has the following advantages over the Swing file chooser:
  - Uses VFS code, so you can browse the local filesystem and remote FTP
    sites from one dialog box (the old FTP Browser is gone, by the way)
  - Multiple file selection is supported
  - Remote directory listings are cached for improved performance. The cache
    can be flushed with the Utilities->Flush Remote Directory Cache command
  - Tooltips are shown for obscured and truncated file names
  - More flexible sorting
  - Frequently-visited directories can be stored in a 'favorites' list
  - Optional 'tree view' allows quick viewing of an entire directory
    hierarchy
  - Hidden files can optionally be displayed
  - Geometry of file chooser is saved
  - The 'Find file' widget has not yet been ported to the VFS. It will appear
    in a future pre-release.
- Utilities->File System Browser displays a stand-alone version of the file
  chooser

+ Enhancements

- Major changes to VFS code to support browsing
- Updated JavaScript mode (Ollie Rutherford)
- Tool bar buttons now have a 'rollover' effect
- Global Options dialog box re-arranged somewhat
- 'Send' command moved to a plugin, out of the core
- Repeated actions can now be undone in one operation
- Macro invocations can now be undone in one operation
- HyperSearch command no longer displays the wait cursor in all open views
  while searching -- because the search is threaded, this didn't make sense

+ Bug Fixes

- Plugins couldn't be removed on systems that disallow removing open files,
  such as Windows (since 2.6pre1)
- FtpVFS.getFileLength() always returned 0 (since 2.6pre1)
- FtpVFS would throw a NullPointerException if an error occurred while
  connecting to the FTP server
- An autosave setting of '0' caused problems (since 2.6pre1)
- Macros invoked using keyboard shortcuts would always fail with a
  "macro not found" error (since 2.6pre1)
- 'HTML/Close Tag' macro called on non-existent goto-end-indent action
- HTMLActionButton.java didn't compile on JDK 1.3 (since 2.6pre1)

+ API Changes

- org.gjt.sp.jedit.REFileFilter class removed
- Many changes made to org.gjt.sp.jedit.VFS class
- New AbstractOptionPane.addSeparator(String) method
- New methods added to GUIUtilities class:
  input(Component comp, String name, String[] args, String def);
  inputProperty(Component comp, String name, String[] args, String def);
- MiscUtilities.constructPath() no longer returns a canonical path (ie,
  with all symlinks resolved)
- New method: GUIUtilities.loadMenu(String). Plugins that target jEdit
  2.6pre2 (or 2.5.2) can use this method instead of the older loadMenu()
  form.
- org.gjt.sp.jedit.syntax.SyntaxDocument class removed

* Version 2.6pre1

+ New Features

- Macros can now be added to the tool bar and right-click context menu
- The bracket matching code now only checks syntax tokens of the same type
  as the bracket for matches. As a result, string literals and comments
  containing brackets should no longer cause problems
- New 'EditBuddy' plugin, included in the jEdit distribution, displays
  'initial setup' and 'new version' wizards when jEdit is first run and
  when a new version is installed, respectively. These wizards help you
  configure firewall settings, install and update plugins, view the
  change log, and other such stuff.
- 'Print' command now supports printing of line numbers, and many printing
  settings can now be customized in Utilities->Global Options->Printing
- I/O requests no longer block the GUI, and multiple requests can be
  executed at once. By default, 4 I/O threads are started; this can be
  changed in Utilities->Global Options
- I/O requests can be monitored and aborted in Utilities->I/O Progress
  Monitor. A miniature version of the progress display is in the status
  bar of each view

+ Enhancements

- Gutter border color now reflects if the respective text area has focus
- Menu bar code restructured somewhat
- View-related commands moved out of Utilities menu to new View top-level
  menu, Buffers menu is now a submenu of the new View menu as well
- Colored 'orbs' displaying file modification status are now displayed in
  the Buffers menu
- Registers and markers are now highlighted using different colors in the
  gutter
- The plugin manager now deletes files for real when removing and upgrading
  plugins; previously, it shoved them in a 'backup' directory
- Shortcut of 'Exit' command changed to C+q
- 'Exit' command now asks for confirmation (can be disabled in
  Utilities->Global Options)
- The directory search feature now sorts file names before searching
- Abbreviations and history files are not saved if they are changed on disk
  while jEdit is running
- The 'Help' menu now displays documentation for plugins that didn't load
- Improved Python mode (Ivan Frohne)
- Improved JSP mode (Vicente Salvador)
- Improved autosave feature -- dedicated autosave thread gone, and up to
  four files are autosaved at once
- The 'Plugins' and 'Help' menus now display 'More' submenus if there are
  a lot of items. This prevents them from being too long
- Threaded FTP browser

+ Bug Fixes

- Fixed installer layout bug which might be the cause of exceptions people
  have been seeing on certain platforms
- Fixed minor cosmetic problem in status bar when entering repeat counts
  where the first digit is '1'
- When buffers were saved while the view was split, the focus would
  always shift to the last (bottom or rightmost) split pane
- JEditTextArea didn't unregister the gutter from the tooltip manager, this
  could result in memory leaks
- C, C++, Java and JavaScript didn't indent 'default:' statements properly
- Empty .marks files weren't deleted if no markers were set when saving to
  an FTP server
- The caret status in the status bar wouldn't be updated when switching
  between buffers where the caret was at the beginning of both

+ API Changes

- GUIUtilities.loadMenuItem(View,String) deprecated. Use
  GUIUTilities.loadMenuItem(String) instead. Don't worry, since all existing
  plugins use the old method, it won't be removed any time soon, if at all.
- Return type of TokenMarker.markTokens() changed from Token to
  TokenMarker.LineInfo
- EditActions can now be invoked without a view (of course the action
  will still fail if it calls EditAction.getView())
- Signature of VFSManager.error() is now void error(Component comp,
  String msg, Object[] args)
- JEditTextArea.get/setDocument(), getDocumentLength() deprecated; use
  get/setBuffer(), getBufferLength() instead
- VFS class changes:
  delete(String path) changed to _delete(Buffer buffer, String path)
  canDelete() changed to _canDelete()
  new _getFileLength(Buffer buffer, String path) method
