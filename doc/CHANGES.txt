JEDIT VERSION HISTORY

* Version 2.3pre1

+ New Features

- Predefined abbreviation expansion.
  - Expand current word by pressing C+e C+b, or entering a non-alphanumeric
    character
  - Abbreviations can be edited in File->Global Options->Abbreviations
  - To insert a character without expanding the current word, type
    C+e C+v <character>. C+e C+v can also be used to insert a literal tab
    or enter if indent on tab or indent on enter is enabled
- Buttons added to tool bar for changing ignore case, regexp, multifile search
  options

+ Enhancements

- 'Expand Abbreviation' renamed to 'Complete Word'
- Pressing '}' now only reindents the line in C derived modes (C++, Java, etc)
- Changes to the key bindings take effect immediately; no need to restart
- Shortcuts option pane split into 'command shortcuts' and 'macro
  shortcuts' option panes
- View status bar code improvements
- New methods in MiscUtilities class: charsToEscapes() and escapesToChars()
- Cancelling a 'save as' when exiting from jEdit now aborts the exit
- Regexps are only longer compiled once in a multifile search; this should
  make things faster when regexps are enabled
- The cursor no longer jumps to the end of the buffer when reload-all is
  invoked
- Documentation updates
- The wait cursor is now shown in the search&replace dialog box when
  doing a 'replace all'

+ Bug Fixes

- Undos are now cleared when a buffer is reloaded (this was a bug because
  the reload garbled existing undos anyway)
- PHP3 mode didn't perform syntax highlighting (since 2.2final)
- Geometry loading moved windows up by the height of the title bar each time
  (since 2.2final)
- The NEW_FILE flag wasn't set for new files until an attempt was made
  to load them from disk, this caused problems with BufferTabs, etc
  (since 2.2pre8)
- The 'Cancel' button in the send dialog did nothing (since 2.2pre6)

* Version 2.2final

Syntax package is now GPL'd again. When we LGPL'd it, jEdit had no IDE
features, so it was natural to let commercial IDEs use it; after all, we
weren't competing. Now that a range of plugins are being written for
jEdit which give it IDE-like functionality, we were basically giving the
competition a free ride.

jEdit 2.1 and 2.0 are still available on the net, and they have LGPL'd
syntax packages. So closed-source programs can still use the older code.

+ New Features

- PHP3 mode added (Clancy Malcolm)

+ Enhancements

- jEdit now ignores ^Z (0x1a) characters at the end of files. DOS-derived
  operating systems (Windows, OS/2) sometimes append these characters to
  text files
- New template.jmk (Mike Dillon)
- Existing help viewer windows are reused, instead of new windows being
  opened all the time
- Documentation updates
- Minor change to the geometry loading code, windows should be positioned
  better

+ Bug Fixes

- It was possible to undo the initial file load, which could leave you
  with an empty buffer (since 2.2pre8)
- Only text area actions were recorded to macros (since 2.2pre7)
- Macro recording had problems with the new delayed-loading buffer code
  (since 2.2pre8)

+ API Changes

- Minor changes to EditBus. This breaks all plugins using the extra
  messages in EditBus.jar
- Removed the GUIUtilities.loadImageIcon() method, since the AWT caches
  loaded images anyway
- HelpViewer(URL) constructor deprecated, use the static HelpViewer.gotoURL()
  method instead, which reuses existing help viewer windows

* Version 2.2pre9

+ Enhancements

- Pressing Escape in the QuickSearch text field now moves the focus
  back to the text area

+ Bug Fixes

- The new buffer loading code relied on Swing internals too much.
  So for the sake of future compatibility, the old 2.2pre6 code
  is now used
- Fixed minor bug with the DIRTY_CHANGED event (since 2.2pre?)
- Files were not retokenized when reloaded, this could cause minor
  problems with syntax highlighting (since 2.2pre7)
- The wait cursor wasn't hidden after a find-next operation if
  no matches were found (since 2.2pre7)
- view.style.operator property was missing, this caused NPEs sometimes
  (since 2.2pre8)
- Fixed compile error with some javac's in SyntaxDocument.java and
  EditAction.java (since 2.2pre7)
- Unnecessary BufferUpdate.MODE_CHANGED messages are no longer sent
  (since ???)
- Fixed bug where invalid lines were sometimes drawn in the wrong color
  as a result of plugin highlighters

* Version 2.2pre8

+ Enhancements

- Buffers are only loaded when necessary. This improves jEdit's
  perceived speed when opening lots of files, etc
- Possible workaround for buggy focus handling
- An even better 'New View' icon (George Latkiewicz)

+ Bug Fixes

- Fixed minor bug in style option pane (since 1.7pre4)
- Perl mode had problems with << EOF statements (Andre Kaplan) (since 1.7pre3)
- Action loading code should now work if jEdit was loaded with a non-system
  class loader(since 2.2pre7)
- Reload command didn't work (Mike Dillon) (since 2.2pre7)
- jEdit now ignores empty command line parameters - so the windows batch
  file should work properly now (since 2.2pre7)
- Buffer.java and EditAction.java didn't compile with javac (since 2.2pre7)
- Fixed ridiculously huge tabs when using proportional-width fonts
  (since 1.7pre5)

+ API Changes

- Buffer.reload(View) is now Buffer.load(View) because it is used for initally
  loading the buffer as well

* Version 2.2pre7

+ New Features

- Scroll bar position is now saved while switching buffers
- You can now sort by label or shortcut in the key binding editor
- Updated expand-abbrev (Valery Kondakoff)
- C+HOME/C+END go to beginning and end of document
- New BufferUpdate.LOADING message fired on buffer load and reload
  (signals that buffer-local properties have changed)

+ Enhancements

- Enhanced horizontal scrolling
- Built-in actions are now dynamically loaded as they are executed, this
  improves startup time and memory consumption somewhat
- The file loading code now bypasses the Swing document interface, so it
  should run a little faster
- jEdit no longer adds two components to the EditBus, this should make
  things a tiny bit faster
- Faster jEdit.closeAllBuffers() method, jEdit shouldn't take as long to exit
  and close all buffers
- New concept of 'temporary buffers' speeds up recursive directory search
  dramatically (the time to search in the org.gjt.sp.jedit.syntax package,
  for example, has been cut from 20 seconds to 5!!!)
- Search and replace only shows the 'keep searching' dialog once
- New 'New View' icon
- Key binding changes:
  C+d C+d: C+d
  C+d C+e: C+e C+d
  C+d C+s: CS+BACK_SPACE
  C+d C+f: CS+DELETE
  C+e C+[: CA+[
  C+e C+]: CA+]
  C+m: C+e C+m
  C+e C+m XXX: C+m XXX
  F2: F3
  F3: S+F3
  reload is now bound to F2
  reload-all is now bound to S+F2
  load-session is now bound to F4
  save-session is now bound to S+F4

+ Bug Fixes

- jEdit checked for a bogus 'saveGeometry' property (since 2.2pre5)
- Fixed bug in globToRE() method (Mike Dillon) (since 2.1pre3)
- Highlights are now drawn for invalid lines as well - so LineGuides will be
  drawn on empty lines (since 1.7pre5???)
- BufferListSet didn't properly search the last file (since 2.2pre4)
- Hopefully fixed last remaining multifile find-next bugs
  (problems with this have been around since 1.7pre3)

* Version 2.2pre6

+ New Features

- Some parts of the EditBus plugin integrated into the core, old event
  system removed.
  - if your plugin only uses the ViewUpdate, BufferUpdate, PropertiesChanged
    and MacrosChanged messages, it will no longer require EditBus.jar.
  - however, if your plugin uses the GetShell or GetOutput messages,
    it will still need EditBus.jar to operate.
- New methods in TextUtilities class:
  findWordStart(String line, int pos, String noWordSep)
  findWordEnd(String line, int pos, String noWordSep)
- The painting of invalid lines can now be toggled in File->Global
  Options->Editor
- Expand Abbreviation now supports multiple matches (Valery Kondakoff)
- doc/NEWS.txt file written :-)
- File->Reload All Buffers command

+ Enhancements

- The wait cursor is now displayed in the HyperSearch dialog box while
  searching
- 'New View' button added to tool bar
- Fixed several files to compile with the jikes 'pedantic' option (+P)
- Documentation updates (user manual and API)
- The 'HyperSearch for Selection' command now immediately searches for
  the selected string when invoked
- If you do a 'Save As' on a temporary macro, it will default to the
  user's macro directory
- Fixed weird scrolling when working with multiple views
- The caret is painted after any plugin highlights, so that line guides, etc
  won't obscure it
- Views after the initial view are created faster, due to several
  optimizations:
  - settings are obtained from previous views, rather than being loaded
    from scratch
  - the menu bar and tool bar is loaded only once, and subsequent views
    create a new one from the 'model'
  - tool bar icons are only loaded once per session
  - on my machine, views now open about 200 ms faster. On slower machines,
    this will be much more noticable
- Improved splash screen
- More robust error checking; a buggy plugin is now less likely to stop
  jEdit from working completely
- The default key handler functionality has been moved into a new class,
  EnhancedDialog, that all jEdit dialogs subclass. This avoids duplicating the
  ENTER/ESCAPE handlers 10000 times

+ Bug Fixes

- The smart home/end toggle was broken (since 2.2pre4)
- Fixed obscure bug with session saving and new files (since 2.2pre1)
- DIRTY_CHANGED events are no longer fired at nearly every autosave (since
  1.7pre2???)
- Removed debugging message ('hi') from GUIUtilities class (since 2.2pre5)
- GUIUtilities.java didn't compile with the JDK 1.3 javac (since 2.2pre5)
- The source parameter to the log() method was ignored when logging exceptions
  (since 2.2pre2)
- HyperSearch didn't deal with closed buffers correctly (since 1.7pre2???,
  another similar bug has been around since 2.2pre1)
- -session command line parameter displayed bogus 'file not found' message
  (since 2.2pre1)
- Shift-clicks on text area behaved in a slightly strange manner (since
  1.7pre5)

+ API Changes

- This doesn't break anything, but is important: plugins that load
  images should use the GUIUtilities.loadImageIcon() method so that
  icons are cached and only loaded once per session
- Plugins that rely on the old event system will no longer work

* Version 2.2pre5

+ Enhancements

- Workaround for broken window geometry code on Linux
- Documentation updates
- New flag can be passed to HistoryTextField constructor; if true, selecting
  something from the popup list will immediately fire an ActionEvent
- Macro shortcut prefix is now C+e C+m again (used to be C+e m)
- 'Block comment' now always inserts comments at the start of the line
- New plugin template.jmk (Mike Dillon)

+ Bug Fixes

- Shift+END didn't work properly (since 2.2pre4)
- The Macros menu wasn't updated when a macro was added/removed (since 2.2pre4)
- jedit.manifest file was not installed with the rest of the source code (since
  2.1pre3)
- Edit modes installed by plugins did not get a chance at automatically being
  selected for a given file type (since 2.2pre1???)
- Fixed HTML comment highlighting bug again (since 2.2pre4)
- Fixed recent file list bug (Mike Dillon) (since 2.2pre1???)

* Version 2.2pre4

As of this version, plugins are no longer part of the core distribution.

+ New Features

- C+BACKSPACE deletes the word before the caret, C+DELETE deletes
  the next word
- Menu item selections and tool bar clicks can now be recorded to macros
- Check box menu items are now supported; override the isToggle() method
  of EditAction to return true, then override isSelected() to return if the
  menu item should be checked
- The "smart" home/end key behaviour can now be set in the Global Options
  dialog box
- Keyboard shortcuts can now be assigned to macros in the shortcut editor

+ Enhancements

- More exceptions are logged now
- New version of Eiffel syntax highlighting
- Java mode now highlights the 'native' keyword
- Macro code cleanup
- Reloading a file will reset the read only flag

+ Bug Fixes

- *.e files were not opened in Eiffel mode (since 2.1final)
- Temporary macro filename changed to '__temporary__.macro'. This should
  stop exceptions from being thrown while autosaving (since 2.1pre3)
- Double clicking at position zero would throw an exception (since 1.7pre5)
- A tag immediately after a comment was not highlighted properly in HTML mode
  (since 2.1pre1)

+ API Changes

- EditorListener interface changed; any plugins that directly implement it
  will need to be updated. It might be a good idea to use adapters instead,
  to protect against future changes.

* Version 2.2pre3

+ New Features

- Clear Activity Log command
- Plugins can now paint custom highlights in the text area (the jEdit core
  only has the bare minimum necessary to do this; see the ErrorList plugin
  for a more high-level approach)
- The API is:
  interface TextAreaPainter.Highlight
  {
  	void init(JEditTextArea textArea, TextAreaPainter.Highlight next);
	void paintHighlight(Graphics gfx, int line, int y);
	String getToolTipText(MouseEvent evt);
  }
  TextAreaPainter.addCustomHighlight(Highlight highlight) should be used
  to add them. paintHighlight() MUST also call the paint method of the
  next highlight, if it's non-null.
- The file encoding used by jEdit can now be set in Global Options
- Editor windows now have icons on systems which support them
  (Valery Kondakoff). Plugins should also call setIconImage() on their
  frames, passing them the image returned by GUIUtilities.getIconImage()

+ Enhancements

- Documentation updates

+ Bug Fixes

- Fixed obscure help viewer bug (since 1.3pre4)
- Font-list code in global options commented out - it's too slow on MS-Windows
  (since 2.1final)

+ Plugin Updates

- Console 1.8
- EditBus 0.3
- ErrorList 0.1

* Version 2.2pre2

+ New Features

- Splash screen now displays a progress bar
- Instead of dumping lots of crap to System.out and System.err,
  jEdit now has an 'activity log' that lists all messages and
  exceptions. To view it, open Help->View Activity Log. Exceptions
  and fatal errors are printed on the console as well, but
  everything else only goes to the activity log now.
- The activity log can be used in other applications; see the
  LGPL'd org.gjt.sp.util package.

+ Enhancements

- The -session switch is now passed to server instances of jEdit
- Buffers no longer use boolean to store flags, instead there is
  one integer storing a bit mask
- PDF documentation is now distributed separately from jEdit, this
  reduces the size of the installer by about 500K

+ Bug Fixes

- Fixed minor bug in load-session action (Mike Dillon) (since 2.2pre1)
- Fixed ClassCastException when loading files on JDK 1.3 (since 2.2pre1)
- BufferListSet and DirectoryListSet had problems with find-next
  (since 2.1pre4)
- Fixed a memory leak where closed buffers were never reclamed
  (not sure when this was introduced)
- Python syntax highlighting had problems with triple-quote (""") statements
  (since 2.1pre1)
- C preprocessor statements (#if, #ifdef, etc) were highlighted in Java
  mode, which is incorrect (since 2.1pre1)
- Passing the -nosession switch to jEdit would throw a null pointer exception
  (since 2.2pre1)
- Clear register command didn't display anything in the status bar
  (since 2.2pre1)

+ Plugin Updates

- Console 1.7.2
- QuickFile: minor hack to make it work with jEdit 2.2

+ Installer Updates

- Text-only install now supported; specify the "text" parameter on the
  command line
- Directories are now created with the correct permissions on Unix

* Version 2.2pre1

+ New Features

- You can now search for strings inside all files in a directory, recursively
- 'Clear Register' command (primarily for macros)
- Macros are now also loaded from $JEDIT_HOME/macros
- Some sample macros are now included with jEdit
- Search and replace operations can now be recorded in macros
- 'Close All Buffers' and 'Exit' commands now display a dialog box listing
  all unsaved buffers
- In C/C++/Java modes, typing '}' will immediately reindent the current line
- 'QuickSearch' text field in the tool bar; no need to open Search&Replace
  dialog box to find a string
- Multiple sessions/desktops can now be saved and loaded

+ Enhancements

- The caret is now moved to where the change was when Undo is invoked
- Most path name constructs are now routed through constructPath()

+ Bug Fixes

- PatchTokenMarker had a bogus dependency on the jEdit core

+ API Changes

- GUIUtilities.show/hideWaitCursor() becomes View.show/hideWaitCursor()
- Mode system cleanup - this breaks XMode
- Several images have been removed from org.gjt.sp.jedit.toolbar package,
  so plugins that use them will have to include those images in their
  JAR file

+ Plugin Updates

- Console 1.7.1

* Version 2.1final

+ New Features

- Eiffel syntax highlighting (Artur Biesiadowski)

+ Enhancements

- Font selector lists all available fonts if JDK 1.2 is available (defaults
  to Java predefined fonts with JDK 1.1) (Jason Ginchereau)

+ Plugin Updates

- BufferTabs 0.3

* Version 2.1pre5

+ New Features

- Directories in ~/.jedit/macros create submenus in the macros menu

+ Enhancements

- Documentation updates
- New plugin makefile template (Mike Dillon)
- Paste Predefined command removed. Use macros or Clipper plugin instead
- Macros menu is sorted now
- Plugin updates;
  BufferTabs 0.2

+ Bug Fixes

- JEditTextArea.setText() now uses SyntaxDocument.begin/endCompoundEdit()
- Installer generated invalid batch files on Windows
- Closing a macro buffer while a recording was in progress would cause
  problems
- 'Close All Buffers' didn't fire BUFFER_CLOSED events
- The register commands weren't recorded properly
- Repeating commands in macros didn't play back correctly

* Version 2.1pre4

+ API Changes

- Old plugin API removed

+ Enhancements

- Minor multifile search and replace cleanups
- MiscUtilities.quicksort() methods added.
  MiscUtilities(Object[], MiscUtilities.Compare) sorts an array,
  MiscUtilities(Vector, MiscUtilities.Compare) sorts a vector.

  Compare defines one method, compare. MiscUtilities.StringCompare and
  MiscUtilities.StringICaseCompare are the two provided implementations
  of this interface

- Documentation updates
- Plugin updates:
  New plugin: BufferTabs 0.1 by Jason Ginchereau
  JBrowse 0.9.9
  QuickFile 0.6
- Updated jars/template.jmk (Mike Dillon)

+ Bug Fixes

- Rectangles at the end of lines had minor problems regarding newlines
- Repeating macros didn't work
- Fixed infinite loop in Paste Previous and Paste Predefined
- The tool bar was broken with the Windows look and feel
- The look and feel selector in 'Global Options' would always display
  'Metal'
- Installer threw an exception on OSes other than Windows and Unix
  (MacOS, OS/2, etc)

* Version 2.1pre3

+ New Features

- (!) Graphical installer
- Simple keyboard macros
  - Macros are stored as files with extension '.macro' in $HOME/.jedit/macros
  - Only keystrokes are recorded, not menu item selections
  - Search and replace operations cannot be recorded yet
- Repeat counts. Enter C+ENTER <count> <action> to repeat <action>
  <number> times. Examples:
  C+ENTER 1 0 C+d C+d: deletes 10 lines
  C+ENTER 5 m: inserts 'm' 5 times
  C+ENTER 5 C+c: copies selection, repeated 5 times, to the clipboard
  C+ENTER 4 0 C+l: moves caret to line 40 (if goto line command is invoked
  with a repeat count, it goes to that line, otherwise it displays the
  goto line dialog box)
- Globs are now used instead of regexps for file filters
- Plugin updates:
  Console 1.7 included
  HTML 2.0 included
- New splash screen

+ API Changes

- OptionPane is now an interface, and default layout code is now in
  the AbstractOptionPane subclass. This breaks all existing plugins
  that use option panes.
- Option pane support removed from old API plugins. Now if you want
  to use option panes, you MUST rewrite for the new API.
- New MiscUtilities.globToRE() method: plugins using globs should
  use this method

+ Enhancements

- File choosers are reused, so the open file and save as dialogs should
  display faster
- Less verbose plugin loading
- Plugin development documentation updated
- A message is displayed after a 'Replace All' showing how many lines of
  text were changed

+ Bug Fixes

- Save As dialogs didn't display the file name
- The key binding editor didn't work for built in actions
- Help contents showed '{1}' for the files in the 'Miscellaenous' section
- 'Spaces to Tabs' command didn't work with column selections
- The server would throw a FileNotFoundException if the -noserver or
  -nosettings switch was used
- Several file filters didn't work because REFileFilter matched on
  path names, rather than file names

* Version 2.1pre2

+ New Features

- RMI server is gone (and so are all of its problems), old socket-based
  system reintroduced (Slava Pestov)
- IDL mode added (Juha Lindfors)
- Some third-party plugins are now bundled with jEdit:
  - Console 1.6 by Slava Pestov
  - EditBus 0.2 by Slava Pestov
  - WWWBrowser 1.2.1 by Slava Pestov
  - QuickFile 0.5 by Jason Ginchereau
  - jBrowse 0.9.8 by George Latkiewicz

+ Enhancements

- File not found errors are no longer shown, instead (new) is displayed
  in the title bar
- To uppercase, to lowercase, insert date, and format actions moved to
  TextTools plugin
- Removed AMSTeX and LaTeX modes, now that the console is a plugin they
  are no longer needed (TeX mode remains of course)

+ Bug Fixes

- PDF, HTML and API documentation was not included with 2.1pre1
- Help index didn't work if jEdit was installed in a directory whose name
  contained a space character

* Version 2.1pre1

+ New Features

- Rectangular selection added; Control-drag to select rectangles,
  and press C+\ to toggle between a normal selection and a
  rectangle
- Registers. A register can store a string, caret position, or
  file name. The anchor commands are no longer supported; use
  caret registers instead. Any number of registers can be used
- `Previous Bracket' and `Next Bracket' commands added
- File filters are now supported in the `Open File' and `Save As'
  dialog boxes
- Python editing mode, contributed by Jonathan Revusky <jrevusky@jet.es>
- `Select None' command
- Documentation is now available in PDF format. It includes
  hyperlinks, and uses less space on disk due to PDF compression
  (to view PDF, get Acrobat Reader from <http://www.adobe.com>,
  it is available for a large number of operating systems)
- XML editing mode, identical to HTML except that JavaScripts are not
  highlighted. Automatically selected for .xml, .sgml and .sgm files

+ API Changes

- The BufferListener interface has changed. Any plugins that
  directly implement BufferListener will have to be modified
- Removed the SyntaxDocument interface, DefaultSyntaxDocument class
  is now named SyntaxDocument
- DefaultSyntaxDocument contains beginCompoundEdit() and
  endCompoundEdit() methods, by default they are empty, but Buffer
  provides implementations
- jEdit.setProperty() method only sets properties if their value is
  different from that already entered
- View.addToolBar(int,Component) changed to View.addToolBar(Component)
- Removed unused viewCurrentErrorChanged() method from ViewListener
- VIEW_CREATED event is fired just before the view is displayed, so that it
  is not necessary to call revalidate(), etc when adding stuff to a view
- New plugin API: extend the EditPlugin class instead. Plugin-interface
  plugins will continue to work, but jEdit will print a warning message
  on startup

+ Enhancements

- The text area now uses Swing double buffering, and should be a bit
  faster
- More responsive mouse dragging
- Slightly faster C and HTML token markers
- Removed some dead code from View.java
- New BUFFER_SAVING event that is fired just before a buffer
  is saved. Can be used by plugins to do some sort of filtering
  before a buffer is saved, eg removing trailing whitespace
- Various minor fixes to the paragraph commands
- Slightly faster keyboard response
- Minor menu bar rearrangement (keyboard shortcuts mostly remain the same)
- Configure script is gone; edit Rules.make by hand, if necessary
- The line number indicator is now displayed to the left of the
  horizontal scroll bar (this means that hints are no longer shown,
  but they weren't very useful anyway)
- 'clear' action removed (why don't you just press 'Backspace'?)
- Closing all buffers will open a new untitled file, instead of exiting
  jEdit

+ Bug Fixes

- Minor change to exit() method that should stop autosave files
  from being left around
- Possible fix for the NullPointerExceptions people were seeing
  when opening files
- Several minor problems in Perl mode fixed
- Previous word/next word commands didn't work in modes which
  didn't define the noWordSep buffer-property
- Scroll to Line command would scroll horizontally by an absurd
  amount
- Sometimes the buffer and view lists would "break" in the middle
  when a view or buffer was being closed
- Resource loading from plugins didn't work with JDK 1.3
- addPluginAction() ignored plugins' keyboard shortcuts

* Version 2.0final

+ Enhancements

- Minor documentation updates
- Internal version numbers/builds are no longer displayed in
  plugin dependencies
- Minor changes to the startup process
- Minor tweak to the open-url command
- Minor change to view closing code

+ Bug Fixes

- The LatestVersion.jar plugin and API documentation was not
  built

* Version 2.0pre8

Because the text area rewrite and multifile search features are
so major, I think it is appropriate to number this release 2.0,
instead of 1.7.

+ Enhancements

- Property files are now loaded with a buffered input stream,
therefore jEdit should start up faster
- Documentation rewritten in SGML-DocBook. HTML and PostScript
versions are provided.
- jEdit no longer uses about ten times the memory necessary when
loading files
- The Open URL dialog box defaults to the current buffer's
directory, instead of the last entered URL

* Bug Fixes

- Removed invalid comment from manifest file
- The select to anchor command will no longer throw an exception
if the anchor is not set
- Sometimes the dirty flag wasn't set when a marker was added
- Help viewer would  throw an exception when the `Contents' button
was pressed
- Fixed a serious bug in the auto save code
- Changing the state of the syntax toggle in the Buffer Options
dialog box didn't properly update the text area
- The paste predefined and paste previous dialog boxes now
have the correct font
- Alt-key mnemonics should now work, as should the F10 key
- Minor scrolling problems fixed
- Minor keyword highlighting problem in C token marker fixed
- The copy command didn't work when the text area was read-only
- Multiple plugins with the same name are no longer loaded

* Version 1.7pre7

+ Enhancements

- Some of the documentation files (FAQ, changes, to do list) are now
supplied in text only format, so you don't have to fire up jEdit or
a web browser to view them
- get/setText() methods added to text area (only necessary for those
using the text area in their applications)
- Faster repainting of text area when typing, etc

+ Bug Fixes

- The AltGr key might work now
- It is no longer necessary to set the `noWordSep' property of documents
when using the text area in other applications

* Version 1.7pre6

+ API Changes

- The various bracket matching routines scattered around the code have
been merged into a single TextUtilities.findMatchingBracket()

+ Enhancements

- The busy cursor is now displayed while loading the options dialog box
(which can take a while)
- The key binding editor can now change text area key bindings (caret
movement commands, page up, page down, etc)
- You can now use S+PageUp/S+PageDown to select screenfuls of text
- Minor tweaks to the HOME and END keys
- Literal search and replace is now performed faster
- Scrolling by screenfuls (with PageUp/PageDown, for example) is now
performed faster
- Files are saved a bit faster
- Javadocs are now provided for the text area classes
- jEdit can be started with the -quit switch to exit the currently
running instance using RMI (this is primarily of use to session managers
and the like)

+ Bug Fixes

- `make clean' left behind unnecessary files in the remote package
- Changing the font of the text area didn't work properly until jEdit
was restarted
- Scrolling and repainting problems would manifest when making changes
at the end of the document
- The END key could throw an exception if the entire document was
visible on the viewscreen
- The buffer list set works better with find next
- Multiline tokens were not correctly colorized sometimes
- When switching to a buffer for the first time, the scroll bar wasn't
updated
- Double clicking on an empty line would throw an exception
- Scrolling didn't work with JDK 1.2. A workaround can be enabled in
File->Global Options->General (it is on by default, but those using JDK
1.1 can turn it off for slightly faster scrolling)
- Editing multiline tokens at the end of the document could throw
NullPointerExceptions
- HTML mode didn't currectly colorize /* */ comments in <script> tags
- Batch file could create invalid tokens under certain circumstances
- The shortcut and style option panes didn't update their tables
properly
- Text area was created too wide
- Scrolling was very slow (and it didn't work at all if the blinking
caret was disabled)
- The latest version plugin would check for a new version even if `no'
was specified

* Version 1.7pre5

+ New Features

- The text component has been completely rewritten:

-- No more problems with files > 2000 lines
-- Overwrite mode now works on Windows JDK 1.2
-- It is faster than the old Swing-based component
-- It can optionally display end-of-line markers
-- It supports Brief-like HOME/END behaviour: press HOME once, and it
goes to the start of the line, press it twice it goes to the first
visible line, press it three times it goes to the beginning of the
document
-- It supports CodeWarrior-like double-click behaviour: double clicking
on a bracket will select the code block delimited by that bracket
-- Double clicks now treat `.' as a word separator, unlike the old Swing
based code (which was very annoying when editing Java source)
-- It is now possible to Shift-click to extend the selection
-- The up/down arrows now behave better

- It is now possible to disable window geometry saving. While this should
be enabled in most situations, it causes problems with some JVMs

+ API Changes

- Because of the text component rewrite, most code that manipulates text
will have to be changed
- getText() removed from RemoteBuffer interface (for security)

+ Enhancements

- Syntax coloring optimizations
- Documentation is no longer part of the jEdit JAR file - it is
installed separately
- More detailed RMI docs included
- It is no longer necessary to start rmiregistry with a -classpath
parameter pointing to jEdit's JAR file
- Changed exit shortcut from C+q to C+e C+q so that if you miss C+w
(close file) you can't accidentally exit the editor
- The busy cursor is now display while loading and saving files, and
several other time-consuming operations
- Minor LatestVersion tweaks

+ Bug Fixes

- Buffer.java, View.java and PerlTokenMarker.java didn't compile with
javac
- Shell script and Makefile mode had minor problems coloring multiline
string literals
- Pasting text now works correctly with the MacOS MRJ
- SyntaxUtilities.regionMatches() had a minor problem, some syntax modes
were affected
- Error messages about invalid markers are no longer printed to standard
output. Previously, a stream of errors would be displayed when the
latest version plugin is being run
- Color picker dialogs were displayed twice in the colors &amp; styles
option pane

* Version 1.7pre4

+ New Featuress

- The colors & styles option pane is now finished
- Automatic upgrade notification: jEdit will now periodically connect to
a server and check if a newer release of jEdit is available
- Old socket-based server replaced with new RMI-based system. This has a
number of advantages over the old system:

-- Other applications can remotely control jEdit
-- Clients can now wait for the buffers they opened to be closed
(jedit implements this with the -wait switch)
-- RMI is well documented, in contrast to the poor server protocol old
jEdit versions used

+ Enhancements

- jEdit configuration files (.jedit-props, .jedit-history) are now
stored in a .jedit subdirectory of the user's home directory. This
reduces clutter in the home directory. If you want to preserve your old
settings in 1.7pre4, you will have to rename the following files:

-- .jedit-props to .jedit/properties
-- .jedit-history to .jedit/history
-- .jedit-jars to .jedit/jars
-- Any other files (.jedit-desktop, .jedit-server-*) can be deleted
because they are only used by obsolete versions of jEdit

- `Save All Buffers' now asks for confirmation because saving all
buffers
- Buffers and views are now stored in a link list; some of jEdit's
internals are now a little cleaner

+ Bug Fixes

- Multiple files could be selected in the `Open File' dialog, even
though only the first one would be opened. Real multiple file opening
will be added as soon as Swing is fixed

* Version 1.7pre3

+ New Features

- Syntax coloring now highlights tokens with text styles (bold, italic)
as well as colors
- Plugin option panes are now displayed in a separate `File->Plugin
Options' dialog box
- `Find Next' now supports multi-file searching
- New `Search->Multifile Search Settings' command

+ Enhancements

- When a line is clicked on in HyperSearch, the actual found text is
selected, rather than the entire line
- Documentation updates
- Instead of one huge makefile, there now is one makefile per directory
- Replace All is faster

+ API Changes

- SyntaxDocument.set/getColors() changed to set/getStyles()
- Compound edit can now be nested

+ Bug Fixes

- Perl mode now colorizes much better
- Plugins now run when jEdit was loaded with a non-standard class loader
(Patrick Beard <beard@netscape.com>)
- If you select `Search in Selected Buffers' in the find dialog, but
don't select any buffers, jEdit will default to searching in the current
buffer
- The geometry of the find and HyperSearch dialogs wasn't being saved
- Removed doc/users-guide/console.html file (the console is now a
plugin, seprate from jEdit)

* Version 1.7pre2

+ New Features

- Perl mode added (slightly flimsy, might be slow)
- Multifile search and replace started (only `Replace All' and
HyperSearch use the multifile code right now)
- `HyperSearch For Selection' command added (Mike Dillon)

+ Enhancements

- Minor syntax coloring optimizations
- Syntax coloring package is now released under the *GNU Lesser General
Public License (LGPL)*. Currently, no other part of jEdit uses this
license, only the syntax package

+ Bug Fixes

- Removed debugging message from shell script mode
- Property file mode didn't support commenting
- HyperSearch didn't have an `ignore case' toggle
- Expand abbreviation only worked when the caret was on the end of the
line
- Saving an `Untitled' file didn't update the `Buffers' menu properly
- Autosave didn't work *at all* - it has been broken since some 1.6
release
- The state of the regular expression toggle wasn't saved properly
(Mike Dillon)

* Version 1.7pre1

+ New Features

- Search and replace overhaul:

-- Replace command is gone, use Replace in Selection instead
-- The regular expression syntax can no longer be set; it is always
Perl5 now
-- Literal search is now supported

+ Enhancements

- WWW Browser commands unbundled into a `WWW Browser' plugin (with more
features)
- Console unbundled into a `Console' plugin (with more features)
- Rot13 and Reverse rolled into Mike Dillon's TextTools plugin
- (all these plugins are downloadable from <http://www.icg-online.de/jedit/>.)
- Menubar rearranged
- Documentation updates

+ API Changes

- MiscUtilities.createWhiteSpace(int length, int tabSize, boolean
noTabs) changed to MiscUtilities.createWhiteSpace(int length, int
tabSize). To use soft tabs, 0 should be passed as as `tabSize'.
- GUIUtilities.message/error/input/inputProperty() methods changed to
take a Frame as a parameter, instead of a JFrame
- Because the console is no longer part of jEdit, and instead a plugin,
other plugins that use it will have to be changed
- Any code using jEdit's search and replace code will have to be
rewritten

+ Bug Fixes

- Soft tabs now go to the next tab stop, rather than always inserting a
fixed number of spaces
- Sometimes multiline tokens weren't repainted properly
- C mode had problems coloring * characters

* Version 1.6.1

+ Enhancements

- Updated FAQ
- Makefile.win for compiling on Windows
- Minor change to mode selection code
- Patch file mode now colorizes context (diff -c) patches better

+ Bug Fixes

- Fixed a bunch of JavaDOC warnings
- Removed bogus freebuilder getting started guide from
org/gjt/sp/jedit
- Fixed GPF with JDK 1.1.8 on startup
- Removed AltGr kludge from SyntaxTextArea.java; upgrade to JDK 1.1.8
if you want to use the AltGr key

* Version 1.6final

+ New Features

- New $n directive in the console inserts the file name (without the
parent directory)

+ Enhancements

- The full name of Untitled files in no longer shown when the
`show full path in titles' option is enabled
- `Find Selection' now behaves like `Find' if no text is selected

+ Bug Fixes

- Minor fix to help viewer cursor code

* Version 1.6pre7

+ New Features

- New option in `Global Options' that toggles display of full paths
in title bars

+ Enhancements

- Key binding rearranged to take advantage of function keys
- Tips updated

+ Bug Fixes

- `Tools->Compile' didn't use the new $ variable notation
- Backslash (\) characters would be discarded from history lists
- The documentation mentioned the `uncomment' command which
doesn't exist in jEdit anymore
- The JARClassLoader didn't check for already loaded classes properly,
so it caused problems sometimes (namely with inter-JAR class loading)
- default: wasn't colorized correctly in C/C++/Java mode
- `Go to Previous Error' could throw an exception

* Version 1.6pre6

+ New Features

- Plugins can now use classes from other loaded plugins
- Plugins can now specify the jEdit/JDK version and any classes they
depend on
- `~' now expands to the user's home directory in console commands
- History combo boxes are now text fields, with up/down arrow key
recall as in jEdit 1.4.

-- Pressing Control with up/down will search
in the appropriate direction for entires starting with the currently
entered text
-- Pressing the right mouse button will display a menu listing all
entires
-- Pressing Control with the right mouse button will display a menu
listing all entires that start with the currently entered text

+ Enhancements

- API change: jEdit.VERSION and jEdit.BUILD renamed to
jEdit.getVersion() and jEdit.getBuild()
- Updated to gnu.regexp 1.0.8
- FAQ updated
- Splash screen is hidden if a dialog box is displayed at startup
(for example, a file not found message)
- `Expand Abbreviation' only expands on word boundaries
- Variable metacharacter changed to `$' in the console, to make it
more consistent with shells, etc that use $ to signify variables

+ Bug Fixes

- SyntaxTextArea.java didn't compile with javac
- Loaded JARs don't have to contain a Plugin instance for resource
loading to work
- JARClassLoader no longer attempts to instantiate abstract classes and
interfaces whose names end with `Plugin'
- The values of View.TOP and View.BOTTOM were incorrect, so the toolbar
API didn't work properly
- JavaScript wasn't colorized correctly in HTML mode if an incomplete
string literal was found
- Fixed several mistakes in console information message

* Version 1.6pre5

+ New Features

- Keyboard shortcut editor in Global Options
- Plugins can now add tool bars to views with the View.addToolBar()
method

+ Enhancements

- New methods in SyntaxTextArea that delegate to the underlying
SyntaxDocument
- Text components using SyntaxEditorKit now must have a document
that implements SyntaxDocument; this leads to simpler code
- New focusOnTextArea() method in View class sets focus on text area
- Minor optimizations in SyntaxTextArea
- `.sqlj' files now edited in Java mode

+ Bug Fixes

- Less reduntant repainting in SyntaxView
- Console can now be moved in Swing 1.1.1
- History text field works better in Swing 1.1.1
- HTML mode threw an exception when colorizing <script> blocks
- Shell script mode threw an exception when colorizing ${...} variables
- Pressing Enter in the `Select Line Range' dialog didn't work

* Version 1.6pre4

+ New Features

- Pressing the Insert key should now toggle overwrite mode. This
only works in the main text component. This feature obsoletes, and
conflicts with the old AltGrPatch plugin. That plugin is no longer
bundled with jEdit; however, it might be left behind from an
old installation. When installing 1.6pre4 make sure to delete
any copies of altgr.jar.
- When opening a multiline token, subsequent lines are colorized
correctly automatically

+ Enhancements

- Multiline literals (>>EOF) are colorized in shell script
mode
- Console now displays command exit status
- Resource loader updates: it now tries to find the resource in
the system class loader if it could not be found in the plugin JAR
- New addComponent() methods in OptionPane class make it easier
to add components to the option pane
- Added check to EventMulticaster class to ensure that listeners
aren't added/removed from inside the fire() method (this limitation
will be removed in the future)
- The TokenMarker.lineInfo[] array is now guaranteed to contain
LineInfo objects for all valid lines
- KeywordMap(boolean ignoreCase, int mapLength)
constructor of KeywordMap class is now public

* Version 1.6pre3

+ New Features

- Major reworking of history list engine:

-- History lists are now saved to a seprate file ($HOME/.jedit-history).
Loading this file is much faster than loading hundreds of properties
-- History lists are now shared. For example, a command entered into the
console of one view will appear in the history lists of all open views
-- The clipboard history is stored using this method as well

- New LineInfo class allows token markers to store whatever they want in the
TokenMarker.lineInfo[] array
- Error messages, information messages and parsed errors are now
colorized differently in the console

+ Enhancements

- Documentation updates
- Minor updates to select line range and goto line commands
- Acu plugin is no longer part of jEdit, and instead it is listed on
Plugin Central

+ Bug Fixes

- The -usrprops= command line parameter didn't work
- Fixed minor bug when saving recent file list
- `Replace in selection' did strange things to the selection start value
- Paths of the form C:blah\blah (with no slash after the drive letter)
were not handled correctly by jEdit
- Exiting jEdit by closing the last open file did not save the
desktop correctly
- Reload could throw an exception if the reloaded file was shorter
than the current one and the caret was at the end of the document

* Version 1.6pre2

+ New Features

- Plugins can now add their own tabs to the global options dialog
with the jEdit.addOptionPane() method
- Plugins can now add their own menus to the `Plugins' menu with
the jEdit.addPluginMenu() method
- Console.addOutput() method is now public, so
plugins such as in-process compilers can take advantage of jEdit's
error parsing feature

+ Enhancements

- API change: Plugin.start() called near the end of jEdit's
startup sequence
- Syntax colorizing change: Token.LITERAL1 should be used for
string literals, Token.LITERAL2 for object literals (eg, null, true, false,
etc)
- Documentation updates
- `Plugins' menu moved to top level of menu bar
- New splash screen
- Operator color changed (operators are only colorized by Transact-SQL mode)
- Documentation for the accent converter plugin is now provided
(Romain Guy)
- Help viewer now shows hand cursor over links (but only on Swing 1.1.1)
(Juha Lindfors)

+ Bug Fixes

- Minor fix to MacOS instructions in README.txt
- Full set of C++ keywords is now colorized (Juha Lindfors)
- Fixed NullPointerException when loading desktop entries with
unknown edit modes (this could occur, for example when starting
1.6pre1 for the first time after running 1.5)
- Fixed minor problem with line and bracket highlighting when
options dialog closed

* Version 1.6pre1

+ New Features

- `Next Buffer' and `Previous Buffer' commands added
- jEdit can now perform auto indent when Enter is pressed, as well
as Tab
- Major console updates
- Plugins with documentation included are now listed in
`Help Contents'
- Syntax colorizing and auto indent can now be enabled/disabled on
a per-buffer basis
- New `send selection' option in Send dialog box
- Help viewer has a new look
- It is possible to set the default mode now

+ Enhancements

- API change: getName() method no longer part of Plugin interface
- API change: TokenMarker API change, you must now override the
markTokensImpl() method (which is higher-level than the old markTokens())
- API change: Mode is an abstract class now, auto indent mode
no longer exists (Mode class performs auto indent by default)
- API change: View.setBuffer() now updates the buffer menu, so
View.updateBuffersMenu() shouldn't be called anymore
- API change: getRE() and related methods moved from jEdit class to
MiscUtilities
- Major syntax colorizing change: color table is now a byte array,
instead of a dictionary (faster and simpler code is the result)
- New SyntaxUtilities.getDefaultSyntaxColors() method returns
default syntax color dictionary
- Major documentation updates
- Manifest file is now provided - jedit.jar can now be run with
`java -jar' on JDK 1.2
- Property cleanups
- Default installation prefix changed to /usr/local on Unix
- Items are added to history lists only once now
- Accent converter updates (Romain Guy)

+ Bug Fixes

- Fixed the cause of inaccurate syntax colorization
(TokenMarker.insertLines() was called twice for each new line)
- HyperSearch would have problems if the view's buffer was changed
- Fixed incorrect behaviour of `Replace' button in Search & Replace
dialog
- Paste previous would stop working after the maximum number of clippings
was present
- Closing an unsaved file could display the `save file' dialog twice
- Closing a file would set the buffer of all views to the last one
- Select line range didn't save the line number history
- Mode.enter() was being called twice by Buffer.setMode()

* Version 1.5.1

+ Enhancements

- Minor update to version1.5.html
- API change: SyntaxDocument interface now includes tokenizeLines() methods
- API change: jEdit.loadProps() behaves differently

+ Bug Fixes

- Fixed StringIndexOutOfBounds exception that could be thrown on Windows

* Version 1.5final

+ Enhancements

- Documentation updates
- Text cursor is now displayed in the text area
- Saving file:/ URLs now works

+ Bug Fixes

- Go to line would display the line number off by one
- JAR loader no longer tries (in vain) to load non-JAR files
- Fixed null pointer exception when switching to non-syntax colorized
edit modes
- Color options dialog shows the color picker dialog twice sometimes
- Fixed unnecessary dependency TeXTokenMarker had on jEdit class

* Version 1.5pre4

+ New Features

- The org.gjt.sp.jedit.SyntaxTextArea class can now be used outside
of jEdit; simply add it to any container to get a bracket matching,
syntax colorizing text component

+ Enhancements

- Code cleanups
- Menu items look better now
- Plugin documentation updates
- Number of items in history lists decreased to 25 because of performance
problems
- Updates to the next error and previous error commands
- URLs can now be entered in the console, and they will be opened in jEdit
(try typing `file:/path to file...')
- The position of the console/text area divider is now stored
- Backup code overhaul, should work much better now
- Minor history text field updates

+ Bug Fixes

- Fixed compile error with JDK 1.2 javac in Buffer.java
- Batch file token marker colorized stuff like C:\bob\fred.exe incorrectly
- Invalid file names in compiler errors caused problems
- The enterView() and leaveView() methods of the Mode interface are
*ahem* actually called now
- View would add lots of empty entires to the console history
- Reload command didn't clear the dirty flag
- Go to line dialog box displayed random crap

* Version 1.5pre3

+ New Features

- New color editor in options (Mike Dillon)
- Buffer-specific options dialog added
- Directory where backups are saved can now be set (Juha Lindfors)
- New, faster JAR class loader that only loads classes as they're
referenced
- New plugin interface, implementations of which are responsible for
adding actions and modes to the editor
- New DefaultSyntaxDocument class which provides a
sample implementation of SyntaxDocument. Should make using
jEdit's syntax colorizing in other apps easier

+ Enhancements

- Miscallaneous code cleanups
- Plugin documentation updates
- Superclass of EditAction changed to ActionListener, no more
Swing action overhead
- More recent items appear at the top of the history combo box list

+ Bug Fixes

- Search and Replace and HyperSearch searched for the wrong string
- The hint bar would obscure the line number display if the view was small
and the hint was long
- Generate text plugin didn't appear in `Plugins' menu
- Fixed mispelling of Juha Lindfors' name in doc/about.html
- Fixed various event-related problems on exit
- Fixed incorrect line number display in console
- Fixed possible array index out of bounds on reload

* Version 1.5pre2

+ New Features

- History text field now has a combo box widget for graphically
selecting previous strings
- Select line range dialog now uses history text fields
- When a new view is created, it takes the caret position from the
view that created it

+ Enhancements

- Removed unneccessary AbstractEditorListener and AbstractEditorAdapter
classes
- Minor documentation updates
- Distribution slimmed down a bit
- Open URL now opens relative to the current file's directory, instead
of user.dir
- New status bar component, shows hints and current line number (instead
of them being in the title bar and menu bar, respectively)

+ Bug Fixes

- VIEW_CREATED events returned the wrong value with the getView() method
- ViewEvent would throw an InternalError when firing a VIEW_BUFFER_CHANGED
event
- Thread safety fix in console code
- Possible fix for weird path name construction on Windows

* Version 1.5pre1

+ New Features

- Each view now has it's own console and error list
- Console automatically appends .exe to command names on Windows and OS/2
- Accent converter plugin now accepts German accents
- Event system added

+ Enhancements

- Find selection shows the search and replace dialog with the selection
already entered, instead of finding the selection immediately
- Find next now starts the search from the end of the selection, rather than
the caret position (which could be the start of the selection sometimes)
- jEdit should be easier to install on OS/2 now
- New tool bar icons
- Documentation updates
- org.gjt.sp.jedit.syntax package can be used on it's own -
documentation on how to do this coming soon
- API change: jEdit.getBuffers()/getViews()/etc return arrays, not enumerations
- API change: Key and document events aren't automatically forwarded to
modes anymore, you must manually add listeners now
- API change: enterView()/leaveView() methods added to Mode interface,
called when a view enters or leaves the mode
- Code cleanup/reorganization

+ Bug Fixes

- The current file wasn't restored properly by the session management code
- Removed CVS temporary files (.#... and .new...)
- Removed unused acu.java file
- Fixed minor bug with the `File->Line Separator' menu
- Fixed bug in print command where it would print stuff other than the
file name in page headers
- `.cmd' files are no longer edited in batch file mode because they
have a different syntax
- Fixed a VERY obscure syntax colorizing bug that nobody has probably
experienced
- Removed the themes directory from the distribution because the
themes were outdated and hard to install

* Version 1.4final

+ Enhancements

- New version of accent converter plugin (Romain Guy)
- When a new view is created, it borrows it's geometry from the current
view
- Minor options dialog box updates
- Changed several syntax colors
- Minor documentation updates

+ Bug Fixes

- Reload command didn't work for files with no edit mode
- Made mode selection case insensitive, so that AUTOEXEC.BAT is now
recognized as a batch file
- The paths that Jikes outputs on Windows (DOS drive letter + Unix
path separator) should be correctly parsed by the `console'
- Accent converter didn't work properly with entitites it didn't know about
- Filter selection dialog wasn't displayed properly
- Fixed bug in search & replace where it would have problems dealing
with an empty replace string
- Possible fix for the options dialog crash some people have been
seeing (autosave thread is now stopped with interrupt() instead of
stop())

* Version 1.4pre8

+ New Features

- Quoted literals that don't end on the current line are colored
differently to make errors easier to spot

+ Enhancements

- Minor documentation updates
- When something is copied or pasted, it isn't added to the
paste previous list if it is already there
- Upgraded gnu.regexp to version 1.0.6

+ Bug Fixes

- Processes invoked from the console that read from standard input
hang forever
- `Keep dialog' didn't work properly - it cleared the text fields,
so you had to press up arrow after each search
- `Replace All' didn't work if the replacement string was shorter than
the search string (really embarrassing bug, and it has been around
since 1.4pre2!!!)
- Fix in Configure script for JVM paths that include slashes
- Error list didn't work with DOS/Windows paths (E:\filename\file)
- HistoryTextField didn't set historyPos to -1 after addToHistory()
- Replace All didn't work if the replacement string was empty
- Desktop had various problems with untitled files
- Desktop was only loaded up to the current file, not the end of
the list
- Fixed incorrect colorization of multiline literals in Makefile mode
- Fixed Makefile bug where it wouldn't install if BINDIR == SHAREDIR

* Version 1.4pre7

+ New Features

- Simple toolbar added
- New `console' window to replace old `command output' - it has more
features
- -+ switch can be used to go to a line number

+ Enhancements

- Minor options dialog box improvements

+ Bug Fixes

- Error list menu was created incorrectly sometimes
- Invalid line numbers in the error list caused problems
- Keywords weren't colorized correctly sometimes
- Untitled files were (wrongly) saved with the desktop, this caused problems
- View size and position wasn't saved on exit

* Version 1.4pre6

+ New Features

- The position of the editor window and most dialogs is now saved to the
properties and restored when jEdit is reopened

+ Enhancements

- `Accents to HTML Entities' plugin optimizations (Romain Guy)
- Desktop file isn't used anymore - session is stored in the properties
- Major code reorganization

+ Bug Fixes

- Files got corrupted if the line separator was set to DOS/Windows in
the Options dialog box (this only affected new files, existing files are
safe)
- Find Selection didn't work
- Soft tabs didn't work in text mode
- Desktop wasn't saved sometimes
- Using the history would delete what was already entered in the text field

* Version 1.4pre5

+ New Features

- Reload command added
- Right click menu added to text area (doesn't work very well yet)
- History in Search & Replace and HyperSearch - use up and down
arrow keys to recall previous search strings (Doesn't work very well yet)
- Keep dialog option in Search & Replace

+ Enhancements

- Electric borders aren't as `agressive' - scrolling starts at three
lines from the top or bottom, not four like before
- Block caret is now off by default
- Files are added to the recent list when they're closed, not opened
- HyperSearch dialog beeps when no matches were found
- Faster keyword map (uses character arrays instead of strings) should make
C, C++, Java, JavaScript and SQL mode faster
- Transact-SQL mode optimizations (Mike Dillon)
- Minor syntax colorizing speedups (less array copying) (Mike Dillon)
- Redundant calls to ensureCapacity() removed from token markers (Mike Dillon)

+ Bug Fixes

- `Font Style' setting in Options should work now (why do I always
mess up in the options dialog box?)
- Sometimes C++ keywords weren't colorized
- Fixed obscure backup bug nobody has ever seen (if you do a `save as'
to a different directory than the original file, the backup is created
in the wrong directory)
- Some constructs would be colorized as labels in C/C++/Java mode
- Fixed very obscure syntax colorizing bug (insertLine() was called
one too many times, this is probably what caused the random multiline
comment glitches, and so on)
- Fixed several buffers menu updating bugs

* Version 1.4pre4

+ New Features

- Added TSQL mode (Mike Dillon)
- Added Block Caret setting in Tools->Options->Editor
- Sticky file format (when a file is loaded, jEdit tries to guess the
line separators. When it is saved, the original line separators are used.
Makes it easier for people who deal with both DOS and Unix files)

+ Enhancements

- Improved KeywordMap, might make C/C++/Java mode faster (Mike Dillon)
- Double clicking on items in `Paste Previous' and `Paste Predefined'
has the same effect as pressing `Insert' (Mike Dillon)
- Size of I/O buffers increased from 8K to 32K - should make file saving
and loading faster
- Removed redundant scanning pass from CTokenMarker - should be about
50% faster
- (, ) characters are now optional in buffer-local properties, for example
you can now write :tabSize=4: instead of (:tabSize=4:) in the first 10 lines
of a file

+ Bug Fixes

- Batch file mode had an ArrayIndexOutOfBounds condition (Mike Dillon)
- HyperSearch dialog didn't resize properly (Mike Dillon)
- AltGR key should now work on Windows (Juha Lindfors)
- Shift Indent Left/Right had problems when shifting empty lines
- Line separator setting in Options dialog box didn't work
- README.txt referenced non-existent COPYING.txt (as of jEdit 1.3, it
is COPYING.html on the doc/ directory)

* Version 1.4pre3

+ New Features

- Added patch mode for editing Unix diffs and patches (Yeah, it's kind of
cheap, but I was editing a diff the other day and thought, why not?)
- Added props mode for editing Java property files and DOS INI files

+ Bug Fixes

- Fixed bug in jEdit.regionMatches method, this caused problems
in HTML, Batch File mode
- `Replace in Selection' didn't work sometimes
- `Save All Buffers' saved all buffers - should only save changed ones
- jEdit should now work with `custom' classloaders
- Fixed bug with plugin classes >8K (thanks to
Mike Dillon <mdillon@uclink4.berkeley.edu> for the fix)
-  KeywordMap didn't work with case insensitive keywords (thanks to 
Mike Dillon <mdillon@uclink4.berkeley.edu> for the fix)
- Indentifiers such as the_class and no_break would be colorized incorrectly
in C/C++/Java mode
- Labels and ?: constructs should now be colorized correctly 99% of the time

* Version 1.4pre2

+ New Features

- Emacs-style error parsing added (If you use the very fast and very good
Jikes compiler, this means that you can give Jikes the +E option and jEdit
will parse the errors like it does with javac, etc)
- Javadoc (/** ... */) comments are now displayed in a different color
(thanks to Juha Lindfors <jplindfo@cc.helsinki.fi> for providing the code)
- `Save All Buffers' and `Select Line Range' commands added
- Search and replace now has `Replace in Selection' command

+ Enhancements

- First text field in `Search & Replace' and `HyperSearch' now gets
keyboard focus by default
- `Replace All' button in Search & Replace now has an Alt+R mnemonic
- `Scroll to Current Line' shortcut changed to C+e C+j, C+e C+l is now
select line range (and this makes it consitent with Go to Line which is
C+l)

+ Bug Fixes

- Fixed minor bug where Compile Errors menu would be empty instead of
displaying `No Errors'
- Minor documentation updates
- Command output window no longer displays `+++ Command finished' since
it would sometimes be displayed before the command had finished
- `Go to Next/Previous Error' dialog has a proper title now
- Fixed incorrect percentage display in the status bar
- C/C++/Java/JavaScript modes would throw an ArrayIndexOutOfBoundsException
if an accented character was found
- HTML mode could throw an ArrayIndexOutOfBounds under obscure circumstances
- StringIndexOutOfBoundsException would be thrown if jEdit's CLASSPATH
was `jedit.jar' with no leading directory name
- Fixed incorrect painting of text area after a mode change
- Partial fix for incorrect colorization of ?: in C/C++/Java/JavaScript modes

* Version 1.4pre1

+ New Features

- Semi-intelligent indent in C/C++/Java modes
- Experimental compiler error parsing added
- `Electric borders' - scrolling starts when caret is 4 lines from
the top or bottom
- Usage hints (ie, Tips of the Day) are displayed in the title bar
until you start typing
- `Scroll to Line', `Exchange Anchor and Caret', `Go to End of Indent',
`Paste Predefined' and `Generate Random Text' (it's funny, so laugh) commands
added
- `Accent Converter' plugin by Romain Guy <RomainGuy@aol.com>

+ Enhancements

- Status bar removed, dirty and read only status now displayed in the
title bar, line number is displayed in the menu bar
- Warning if file has changed on disk by another program
- Improved keyboard shortcuts
- New menu item class displays key bindings in the correct place
- Several options dialog updates
- Several autosave updates 
- Backup is only made only once per file visit (like Emacs)
- Default JVM changed to `java' to make it easier for people with JDK 1.2
- Swapped position of Search and Tools menus to make GUI more consistent

+ Bug Fixes

- Buffers menu's modified flag wasn't updated after a marker was set
- Compiler setting wasn't saved
- `Next Paragraph',  `Delete Paragraph' and `Delete Line' had problems
when working on the last line of the document
- Various dialogs didn't respond properly to Escape
- Incorrect message was displayed in the `save before compiling' dialog
- CTokenMarker (colorizer used in C/C++/Java/JavaScript modes)
would throw an exception if the last character on a line
was `/'
- Fixed the jEdit.regionMatches bug (jEdit 1.3 had a fix for this, but
it caused more problems than the bug itself)
- URLs didn't work properly with the desktop feature on Unix

* Version 1.3final

+ Enhancements

- Minor documentation updates
- `Tabs to Spaces' and `Spaces to Tabs' commands now have keyboard
shortcuts

* Version 1.3pre5

+ New Features

- Plugin documentation added
- `Shift Indent Left' and `Shift Indent Right' commands added

+ Enhancements

- `Save to URL' now defaults to the current file's path, rather
than the last entered URL
- Removed the Plugin interface, we have a flag the the EditAction
constructor instead

+ Bug Fixes

- Fixed bug with shell script mode selection
- Exceptions are no longer printed if .jedit-desktop contains
non-existent files
- First buffer opened by desktop has wrong scroll/caret position
- Auto indent doesn't work properly with tab sizes other than 8
- Removed debug message from `Spaces to Tabs' command
- Locate bracket didn't work in text mode

* Version 1.3pre4

+ New Features

- The color scheme can now be specified in the Options dialog
- Font style can now be set in the Options dialog
- New help system
- Compile and make commands added
- Netscape commands changed to generic Browser commands

+ Enhancements

- join-lines command removed, join-no-indent's shortcut is C+j now
- Updates to Windows install script
- -usrprops= command line parameter added
- `Execute Command' now displays command output in a separate window
- Changed several key bindings to be more consistent/easier to type

+ Bug Fixes

- More than one copy of a URL could be open at once
- SyntaxTextArea.java didn't compile with Sun's javac
- jEdit.parseColor() failed for certain hex numbers
- Line and bracket highlighting wouldn't work after options dialog box
was used
- ^ and $ don't work in regexps
- Opening empty files caused an exception
- Removed select-next,prev-line commands because Swing already defines
Shift+Up and Shift+Down that do the same thing

* Version 1.3pre3

+ New Features

- `Paste Previous' command added
- Bracket highlighting

+ Enhancements

- Line highlighting color changed
- Several new key bindings added
- `Open Link' shortcut changed to C+e C+l
- Caret blink rate can now be set
- Splash screen (use -nosplash switch if you really hate it)
- The blank line at the end of files isn't displayed anymore

+ Bug Fixes

- Expand Abbreviation was buggy
- Recent file list wasn't updated properly by the `Options' dialog
- Marker go to didn't work - Open Link should work now
- A failed `Save As' could cause weird problems
- Send command didn't set the subject line properly
- Search and replace was buggy
- join-lines and join-no-indent was buggy
- delete-no-indent didn't delete the right amount of characters
- Caret wasn't displayed with read only files
- Makefile mode didn't colorize short variables properly
- jEdit.regionMatches() had a bug, among other things this caused
weird problems in HTML mode

* Version 1.3pre2

+ New Features

- `Join Lines' and `Join Lines No Indent' commands added
- Various paragraph related commands added
- Desktop feature for saving the file list on exit and opening those
  files on startup
- `Pipe Selection Through Command' command added
- The current line is highlighted

+ Enhancements

- Expand abbreviation command updates
- Search & Replace tweaks
- Replace All operation can now be undone in one operation
- `Execute Command' command now displays any errors returned by the
program in a dialog box
- Improved caret saving
- More documentation

+ Bug Fixes

- C+[ C+i and C+d C+i commands changed to C+[ C+n and C+d C+n because
C+i creates the wrong key code on some Java virtual machines
- Mode-specific defaults for buffer-local properties wouldn't work
- Format command didn't work properly
- Files weren't tokenized properly after being loaded
- \$ inside $...$ constructs wasn't colorized correctly in TeX mode
- select-anchor didn't work
- print.java didn't compile with Sun's javac
- Tab size setting in options dialog box didn't work properly
- Java mode didn't recognise the `throw' keyword
- `Replace All' command didn't work sometimes

* Version 1.3pre1

+ New Features

- New line-based commands added
- JavaScript mode added
- Auto indent mode uses spaces instead of tabs if `noTabs' buffer-local
property is set
- HTML mode colorizes JavaScript in <script> tags
- Defaults for buffer-local properties are obtained from global
properties
- Multiple key shortcuts (a la Emacs)
- Modes can implement KeyListener and DocumentListener to receive
  events
- BufferMgr, CommandMgr, PropsMgr merged into jEdit class
- Commands changed to Swing actions

+ Enhancements

- Properties split into three files - jedit.props, jedit_gui.props,
  jedit_keys.props
- C/Java mode: object instantiations removed from critical path
- HyperSearch command updated to use floating positions
- Search And Replace dialog tweaked a little
- Marker list is kept sorted by `Set Marker' command
- New, easier to follow documentation format
- jEdit batch file and shell script updates

+ Bug Fixes

- Several Java and C keywords were missing
- Path names like ../../file could cause problems
- Options dialog box contained a reference to the obsolete `jOpen'
  program
- Autosave files wouldn't be deleted properly after a `Save As' or
  `Save to URL'
- Search and replace wouldn't handle all exceptions properly
- A \$ inside a $...$ construct wasn't colorized correctly in TeX mode
- Open Recent setting in Options dialog box didn't work

* Version 1.2final

- Removed unfinished Java indentation
- Fixed array index out of bounds in C/C++/Java colorization
- Fixed bug where classpath was `jedit.jar'
- Wordaround for Swing 1.1 removeAll() bug
- Java mode now understands `throws' keyword
- C mode now understands `throw', `try', `catch' keywords
- Minor changes to CommandMgr API
- Minor changes to file opening behaviour
- Minor changes to mode selection behaviour
- Untitled file name changed
- Properties are now in the jedit.jar file
- Minor documentation updates

* Version 1.2pre10

- Format command fixes
- Send command fixes
- Print command handles tabs properly
- Minor syntax colorizing updates
- Minor buffer code updates
- Minor configure script updates
- Minor documentation updates

* Version 1.2pre9

- Ported to Swing 1.1beta3/JDK 1.2
- C mode added
- Java mode updates (new buffer-local variable and colorization)
- Makefile mode updates
- Shell script mode updates
- `Open Recent' menu changed to display most recent items at the top
- Minor server updates
- jEdit shell script updates
- Minor documentation updates

* Version 1.2pre8

- Serious bug in `Replace All' fixed
- Removed debugging messages from expand_abbrev
- Major syntax colorizing updates (should be much faster and smoother now)
- Major edit mode updates (HTML, Makefile, TeX, Shell Script bugfixes and
  enhancements)
- Heap size increased on Windows
- Minor documentation updates
- Menubar rearranged

* Version 1.2pre7

- Syntax colorizing array index bug really fixed
- Several bug fixes in the expand abbreviation command
- HTML mode updates (comments handled specially and tag fixes)
- Shell script mode updates (variables and strings handled better)
- Makefile mode updates (variables and strings handled better)
- TeX mode updates (various small fixes)
- Shell script mode added
- Batch file mode added
- Documentation updates
- Configure script updates

* Version 1.2pre6

- Syntax colorizing array index bug fixed
- Makefile edit mode added
- TeX mode updates
- Java mode updates
- JSTokenMarker API changes
- `config.bat' renamed to `install.bat'
- Minor documentation updates

* Version 1.2pre5

- `Locate Bracket' command
- `Locate Block' command
- `Locate Paragraph' command
- Syntax colorizing is done when printing
- HTML mode added
- TeX mode added
- Java mode updates
- Configure script updates
- Minor syntax colorizing updates
- Minor documentation updates
- Code cleanups

* Version 1.2pre4

- Horizontal scrollbar should work now
- Path name code updates (only one copy of each file can be open at once)
- Format command updates (should work now)
- Configure script updates (Java virtual machine setting fixed)
- jEdit shell script updates ($JEDIT enviroment variable for JVM settings)

* Version 1.2pre3

- Format command (similar to `fill' in emacs)
- Syntax colorizing switch in options dialog
- Changed buffer-local property names to be more obvious
- Fixed bug where new views would have the wrong size
- For some weird reason, some global settings such as font and auto indent
  were stored once per view/buffer. Now they're only stored in one place
- Smoother syntax colorizing (thanks Tal)
- Removed line wrap options from options dialog (because they don't work)
- Removed debugging messages from expand_abbrev
- Code cleanups
- Minor documentation updates

* Version 1.2pre2

- Should compile with Sun's javac again
- Very experimental (and slow) syntax colorizing
- Useful expand abbreviation feature (similar to Emacs' Meta-/)
- Netscape plugin integrated into main program
- Auto indent and Java modes integrated into main program
- HyperSearch updates
- gnu.regexp included again (nobody can be bothered downloading it :) )
- Java mode updates
- Command/prop manager API split (normal versions show error dialogs,
  _ prefixed versions throw exceptions or return null pointers)
- Fixed jEdit.untab() bug that has been around forever
- Sledgehammer fix for setPath()/save() bug where file would still have
  relative pathname after a save
- Documentation updates
- jEdit shell script updates
- Minor config.bat updates
- Minor PropsMgr updates

* Version 1.2pre1

- Search and replace should actually work now
- Fixed silly (but obscure) CommandMgr bug (classes that directly depend on
  classes after them in the JAR file wouldn't load)
- gnu.regexp no longer bundled with jEdit, download it yourself
- Fixed some null pointer conditions in jEdit.loadMenu{Bar,Item} and CommandMgr
- Put everything in org.gjt.sp.jedit package
- Auto indent mode updates: markers and caret are now preserved on lines being
  indented
- Netscape plugin asks if file should be saved first if there are unsaved
  changes
- Auto Indent Options command removed, use `ai' buffer-local property instead
- Java mode
- `jedit.home' property not needed anymore
- When a buffer is closed, the view switches to the previous, not the
  first buffer
- jEdit now tries to connect to the server when starting. This makes jOpen
  redundant
- Changed superclass of SyntaxTextArea to JEditorPane
- Properties can be embedded in files (currently, tabSize and mode)
- Minor configure script updates
- Documentation updates

* Version 1.1.1

- Fixed version number in config.bat file
- Fixed jopen shell script

* Version 1.1final

- Killed unfinished Java mode

* Version 1.1pre7

- Major auto indent mode updates
- Renamed configure.bat to config.bat (somebody said that Win98 can't
run .bat files whose names are longer than 8 characters)
- Buffers menu now shows edit modes and dirty flags
- Updated to gnu.regexp 1.0.5
- Minor kdelnk updates
- Minor Makefile updates (should now work on Digital Unix (?))
- Minor documentation updates

* Version 1.1pre6

- Server is more secure (authorization using a key stored in the port file
  is now required)
- jEdit and jOpen shell scripts should now work better on multi-headed
  systems (screen part of $DISPLAY ignored when specifying port file)
- Fixed bug when markers file wasn't properly updated after all markers were
  cleared
- Fixed pure Java jOpen behaviour to match shell script jOpen
- Works better when "jedit.home" property isn't set (ie, when it's not being
  run with the shell script or batch file)
- Minor documentation updates

* Version 1.1pre5

- Fixed open URL path name bug
- Fixed open recent bug
- Fixed obscure path name bug
- Fixed edit mode bug
- Fixed port file setting in jEdit shell script
- Fixed plugin load error dialog
- System properties are now in a seprate file
- Javadocs for Buffer class
- Buffers menu moved to start of menubar
- Documentation updates (including regexp syntax docs)

* Version 1.1pre4

- Regular expression search and replace using gnu.regexp
- Go to marker from command line fixed
- Hooks added to command manager
- More property name changes
- Server bug fixed
- Help command fixed
- Auto indent bug fixed
- The caret position is saved when switching buffers
- Mode is set correctly for GZipped files
- Minor documentation updates
- Shell script version of jOpen doesn't use `cut' anymore
- SyntaxTextArea subclass of JTextArea created, will be used for
  syntax colorizing later on
- Configure script updates
- Code cleanups

* Version 1.1pre3

- jEdit shell script fixed to run in shells other than bash
- Major editing mode code updates
- Many property names changed
- Auto indent mode (similar in functionality to jEdit 1.0's auto indent)
- Java mode updates (but it still doesn't work)
- Java pretty print plugin included again
- Documentation updates
- Error message updates
- Shell script version of jOpen installed if netpipes is detected
- Configure script updates
- Workaround for Swing 1.1beta's divide by zero bug
- Minor pathname code updates
- Obscure server bug fixed

* Version 1.1pre2

- Fixed scripts and Makefiles for non-GNU find, sh and make
- Faster file loading
- Preliminary and untested editing mode support
- Open in Netscape and Open Selection in Netscape commands
- Major changes to Command interface
- Improved documentation
- Fixed startup process
- Code cleanups

* Version 1.1pre1

- Fixed opening non existent files
- Fixed editing files with Windows line endings
- Fixed horizontal scroll bar
- There is now a Configure script for specifying the install directory and
  other build parameters
- Windows compile scripts scrapped. Too many hardcoded parameters, too hard
  to maintain
- Changed to use jre on Windows as well
- `-noserver' option can be passed to jEdit
- Server isn't started when jEdit is being run as root on Unix to protect
  from denial of service attacks
- Server checks if existing port file is valid before bailing out
- A message is printed if system properties couldn't be found
- Minor set marker command updates
- Full path isn't displayed for untitled files
- Removed jOpen's useless `-server' switch
- Improved fatal error messages
- Improved documentation
- Code cleanups

* Version 1.0final

- JSBeautifier plugin included

* Version 1.0pre2

- Open URL command fixed
- jOpen fixed on Windows
- Read only flag is set if the file is read only
- Read only flag is cleared after saving
- Pathnames are always absolute now
- Integrated several plugins into the main program
- Execute command
- Minor documentation updates

* Version 1.0pre1

- File loading and saving in Windows fixed
- Windows batch files fixed (*THIS* time, they should really work!)
- Changed to use the AWT file dialog. I will switch back to the Swing
file dialog as soon as Swing 1.1 final is out
- Open recent fixed
- Autoindent with selection fixed
- Replace All quirk fixed
- URL marker loading fixed
- Plugin compilation under Windows fixed (Again)
- Minor property updates
- Minor documentation updates

* Version 0.9

- jOpen's broken behaviour fixed
- Minor documentation updates
- Win32 JRE doesn't like the classpath. Changed to use javaw instead
- Minor send plugin updates
- Title bar now includes the string `jEdit'
- Lots of bug fixes
- Code cleanups

* Version 0.8

- Several bug fixes
- The first 20 markers now have keyboard shortcuts
- Options dialog
- jOpen now accepts -readonly flag
- jEdit should now work with the TYA JIT
- Improved documentation

* Version 0.7

- Several bug fixes
- Changed to use JRE by default
- Send plugin
- Rot13 plugin
- Improved documentation

* Version 0.6

- Several bug fixes
- Source code cleaned up a bit
- Plugins can now be compiled and installed under Windows (finally)
- Read only flag added
- Insert Date plugin
- Jumping to a specific marker from command line
- Search and replace
- More documentation

* Version 0.5

- Lots of bug fixes
- Simplified shell scripts and batch files
- More documentation

* Version 0.4

- Lots of bug fixes
- Improved error handling
- Persistent markers
- Printing
- Automated installation of PIF and kdelnk files
- More plugins
- More documentation

* Version 0.3

- Fixed save to url with new file bug
- save and open commands split into save, save_as, save_url, open and open_url
- save() and openFile() methods split into save(), saveAs(), saveToURL(),
  openURL() and openFile().
- Commands cleaned up
- Renamed open/newBuffer() to open/newFile()
- open_selection command
- Files are opened relative the current file's directory
- More documentation
- By default, views are 80 columns wide
- Obscure erros are handled better

* Version 0.2

- Change log started
