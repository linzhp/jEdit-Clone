JEDIT 2.5 VERSION HISTORY

* Version 2.5pre1

+ New Features

- New I/O system.
  - Multithreaded - this should improve perceived performance, and you
    can abort lengthy I/O operations
  - Supports pluggable 'virtual filesystems' which can support transparent
    loading and saving of non-local files
- Undo queue size can be set

+ Enhancements

- MARK_PREVIOUS rules are now checked for after keywords
- Function calls are highlighted in C-like modes (C, C++, Java, etc)
- Sequences with a trailing 'd', 'f', or 'l' are now highlighted as digits
- Modal dialog boxes are now centered relative to the current view

+ Bug Fixes

- Having a 'case' on a line did not indent the next line correctly in
  C-like modes (since 2.4pre6)
- jEdit would hang when existing if any untitled files were open
  (since 2.4final)
- XML mode firstlineGlob was incorrect (since 2.4pre6)
- TeX mode didn't define the block comment property (since 2.4pre2)
- Reloading a file didn't update the buffers menu or title bar when
  necessary
- Marker goto (filename#marker) on the command line didn't work
- 'Search->Toolbar Incremental Search' didn't disable the multifile
  button (since 2.4pre4)
- jEdit should prompt to reload a file if the modification time becomes
  older than when it was saved, as well
- Auto indent would insert too much indentation if the same line contained
  an 'indentPrevLine' statement and an opening bracket (since 2.4pre6)

+ API Changes

- BufferUpdate.LOADING removed. Use BufferUpdate.LOADED instead
- Deprecated Buffer.loadIfNecessary() method removed
- Because of the new multithreaded I/O system, plugins that assume buffers
  obtained with getBuffer() or openFile() always have valid data in them
  will no longer work. You must now either:
  - wait for all I/O requests to complete with VFSManager.waitForRequests()
    this is not recommended as it ties up the AWT thread
  - wait for the BufferUpdate.LOADED message to arrive
  - add a runnable to the I/O thread with VFSManager.runInAWTThread().
    Runnables added with this method are executed after all I/O requests
    are completed.
