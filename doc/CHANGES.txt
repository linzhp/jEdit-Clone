JEDIT VERSION HISTORY

* Version 2.4pre4

+ New Features

- CSS mode added; HTML and friends now highlight CSS stylesheets inside
  <style> tags (Mike Dillon)
- Major ASP mode updates (Andre Kaplan)
- New 'search bar' with incremental search support replaces QuickSearch
  field on toolbar
- PHP mode updates (Mike Dillon)
- JMK (Java Make) mode added
- New token types added: Token.{CONSTANT,VARIABLE,FUNCTION,DATATYPE,DIGIT}
- Pascal mode (Kristian Ovaska)

+ Enhancements

- PHP, JSP, ColdFusion now support inline JavaScript
- Updated VBScript and JavaScript modes (Andre Kaplan)
- Improved Search & Replace and HyperSearch dialog boxes
- Utilities->Reload Edit Modes now works with the -nosettings switch
- If the plugin list cannot be loaded, the plugin manager now displays a more
  helpful error message telling the user to install the Firewall plugin if they
  are behind a firewall
- JARClassLoader now displays error messages in more friendly dialog boxes,
  instead of printing stuff to the activity log

+ Bug Fixes

- Fixed a bug in SyntaxDocument's line handling (since 2.4pre2)
- Automatic abbrev expansion didn't work (since 2.4pre1)
- BufferTabs had problems when buffers were closed sometimes (since 2.4pre1)
- If ruleset a::A delegated to b::B which delegated to C, jEdit would look
  for a::C instead of b::C (since 2.4pre2) (Mike Dillon)
- Sources for AElfred XML parser were in the JAR but weren't installed
  (since 2.4pre2)
- Fixed a few problems with resource handling
- When run with the -nosettings switch, jEdit would create a 'mode-cache' file
  in the current directory (since 2.4pre3)

* Version 2.4pre3

jEdit 2.4pre3 is being released so soon after 2.4pre2 because an installer
error prevented 2.4pre2 from being installed properly.

+ New Features

- Previously, jEdit loaded all XML mode files on startup. This could take
  a long time. Now, we write only read a cache file, which can be loaded
  much faster. The cache file needs to be recreated when new edit modes
  are installed; invoke 'Utilities->Reload Edit Modes' to recreate it

+ Enhancements

- Ruby mode updates (Mike Dillon)
- Perl mode updates (Mike Dillon)
- Syntax highlighting streamlined

+ Bug Fixes

- jEdit didn't install due to an installer error (since 2.4pre2)
- jEdit didn't check if the buffer changed on disk when switching buffesr
  (since 2.4pre1)
- The read only flag wasn't set on files (since 2.2 !!!)
- Rule sets inherited the previous rule set's keyword map if no KEYWORDS
  element was specified (since 2.4pre2)
- Fixed escape handling in delegates (Mike Dillon) (since 2.4pre2)

+ API Changes

- The ASPMode plugin will no longer work, because hard-coded token markers
  are no longer supported. ASPMode should be rewritten in the XMode XML
  syntax.

* Version 2.4pre2

+ New Features

- The XMode plugin by Mike Dillon has been integrated into the core. This means
  that:
  - you can now define edit modes using an XML syntax
  - there are more modes available -- COBOL, ColdFusion, Ruby, Scheme, AWK, etc
  - many existing modes now work better; operators are highlighted, etc
  - jEdit starts up a little slower now, because it has to parse all XML mode
    files. In a future release, we will implement a cache mechanism that will
    speed up startup
  - the Perl mode is still implemented using the old syntax system, because the
    XMode parser doesn't yet have the necessary features to highlight Perl mode
- The current line is highlighted in the gutter now

+ Enhancements

- Closing a buffer will now go to the most recently edited buffer, rather
  than the previous one

+ Bug Fixes

- 'Complete Word' didn't find all completions (since 2.4pre1)
- Inserting lines at the end of non-text files didn't work properly (since
  2.4pre1)
- File modification check on focus didn't work very well (since 2.4pre1)
- Fixed possible ClassCastException with plugin manager (since 2.3pre5)

* Version 2.4pre1

+ New Features

- The syntax highlighting system no longer reparses lines every time
  they are drawn; instead, tokens are cached and lines are only parsed
  when the document changes. This should result in smoother scrolling
  and improved performance in general
- Subsequent tokens with the same id are now merged by the syntax
  highlighting system, this should improve performance when using XMode
- JEditTextArea internals have been cleaned up and simplified somewhat
- Views now check if their buffers have changed on disk every time they
  gain focus (this can be disabled in Utilities->Global Options if
  desired)
- You can now have more than one split in a view
- C+F11 and C+F12 go to the previous and next split pane, respectively
- C+e TAB toggles between the current and previous edited buffers
- The current repeat count, if any, is now shown in the status bar
- 'Complete Word' now displays a dialog box listing all completions if
  there is more than one
- Opening a file which is already open will ask if it should be reloaded

+ Enhancements

- In the multifile search settings dialog box, the default values of the
  'directory' and 'glob' fields are taken from the current buffer's
  directory and filename extension, respectively
- If the only opened file is an untitled file with no changes, opening
  another file will close the untitled file
- 'Save As' warns you before overwriting an existing file
- Plugin manager now prints exception tracebacks to the activity log
- Mode class simplified a bit

+ Bug Fixes

- When using JEditTextAreas standalone, not having a status component would
  throw NPEs (since 2.3pre2)
- Removed debugging message when doing a 'save as' (since 2.3pre2)
- When doing a 'save as', buffers weren't repositioned in the buffer
  list if sorting is enabled (since 2.3pre2)
- CreateGetSet macro didn't work (since 2.3pre3)

+ API Changes

- Signature of TokenMarker.markTokensImpl() and TokenMarker.addToken() methods
  changed; this breaks XMode
