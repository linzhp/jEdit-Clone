JEDIT FREQUENTLY ASKED QUESTIONS

Please read this file before reporting bugs.

* Contents

- 1. JDK bugs that cause problems in jEdit
- 2. Why are file permissions reset to the defaults when I save?
- 3. Why can't I copy and paste between jEdit and other applications?
- 4. Why do I get OutOfMemoryErrors?
- 5. Why do I get a ClassDefNotFoundError on startup?
- 6. Why doesn't plugin XXX work?
- 7. Why is jEdit so slow?

* 1. JDK bugs that cause problems in jEdit

Before reporting a problem with jEdit, make sure it's not a JDK bug:

- Bug #4186108, maybe others - printing doesn't work very well with JDK
1.2 (not yet fixed)
- Bug #4159610 - Alt key menu mnemonics insert the mnemonic character
into the text (the bug parade lists it as being fixed in a `non-public
release', so it should appear in a new JDK soon)
- Bug #4122687 - the AltGr key doesn't work (fixed in JDK 1.1.8 and 1.2.2)
- Bug ???? - cursor handling in lightweight components is broken
- Bug ???? - the HTMLEditorKit (hence the jEdit help viewer) is buggy
and doesn't support some HTML

* 2. Why are file permissions reset to the defaults when I save?

This occurs because of a Java limitation. The only workaround is to
disable backups in `File->Global Options->General'.

* 3. Why can't I copy and paste between jEdit and other applications?

If you're using jEdit on a Unix system, you will not be able to access
the `middle-mouse-button' cut buffer, only the Motif clipboard. This is
due to the way the JDK is implemented on Unix.

A crude workaround is to use an application that supports both
clipboards, such as nedit, to transfer data.

Some people also reported that copy & paste doesn't work very well on
Windows, either. So the JDK sucks when it comes to clipboard handling.

* 4. Why do I get OutOfMemoryErrors?

When you have lots of buffers open, there might not be enough free space
in the Java heap, even though lots of RAM is available. The solution is
to increase the Java heap memory allocation.

On Windows, enter the following in an MS-DOS Prompt before starting
jEdit, or place it in your AUTOEXEC.BAT to have it done every time the
system starts:

set JEDIT=-mxNNm

On Unix systems with a Bourne shell (ash, bash, jsh, sh, zsh) enter the
following in a command line before starting jEdit, or place it in your
.login or .profile to have it done every time you log in:

set JEDIT=-mxNNm; export JEDIT

On Unix systems with a C shell (csh, tcsh) enter the following in a
command line before starting jEdit, or place it in your .csh.login or
.csh.profile to have it done every time you log in:

setenv JEDIT -mxNNm

Where NN is the size of the Java heap, in megabytes. The default is 16
Mb - if you like to open lots of files at once, 32 or even more might
be better.

* 5. Why do I get a ClassDefNotFoundError on startup?

If you get a `ClassDefNotFoundError' when jEdit is starting up, the most
likely problem is that you do not have Swing 1.1 or later installed
properly. For jEdit to work, Swing 1.1 or later must be installed, and
it's swingall.jar file must be in the CLASSPATH.

Swing can be downloaded from <java.sun.com/products/jfc/index.html>.

* 6. Why doesn't plugin XXX work?

If installing a plugin just gives you lots of exceptions, make sure that
the plugin is compatible with your version of jEdit; changes to jEdit's
plugin API are made from time to time, and some plugins break. You
should either upgrade jEdit, the plugin, or both.

Download updated jEdit versions from <http://www.gjt.org/~sp/jedit.html>.
Download updated plugins from <http://www.icg-online.de/jedit>.

* 7. Why is jEdit so slow?

Because jEdit is written in Java, it's performance will always be slower
than native applications. A fast system with a good Java implementation
will narrow the performance gap.

On all systems, a speedup can be achieved by installing the latest JDK
and/or Swing version. For those using JDK 1.1, Swing 1.1.1 seems to be
faster than Swing 1.1final. Those using JDK 1.2 should try the early
access version of JDK 1.3 with the new HotSpot VM: apparently it speeds
up jEdit significantly.

Finally, if your jEdit version is more than a couple of months old,
chances are a newer version is already available. Improvements to
jEdit's speed are always being made.

Download updated jEdit versions from <http://www.gjt.org/~sp/jedit.html>.
