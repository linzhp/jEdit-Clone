Here is my to do list for jEdit 3.1. Tell me what you think.

* Folding

'foldMode' buffer local property is either 'manual', 'embedded',
or 'indent'.

In 'manual' mode, folds can be added manually using various commands,
and are saved to .<filename>.folds.

In 'embedded' mode, buffers are scanned for customizable start/end
strings; for example, { and }.

In 'indent' mode, folds are added on lines where the indent increases
from the previous.

Folding commands will be in the View->Folding menu.

* Gutter changes

Fold arrows will be shown in the gutter. The 'Gutter Expanded' command
will be removed, replaced by a single 'Line Numbering' command which,
if selected, widens the gutter appropriately and shows line numbers.

The gutter will no longer be resizable, and it's size will instead be
determined by the width of the longest line number.

* LineInfo array moved

The lineInfo array and associated methods (markTokens(), insertLines(),
deleteLines()) will be moved from the TokenMarker class to the Buffer
class.

* Simplify internals

Remove the MenuItemModel, MenuModel, ToolBarModel classes. I once
thought they would improve performance if multiple views were opened,
but the improvement is very slight and complicates the code needlessly.
In addition, opening multiple views is not as useful as it once was,
because views can be split now.

* Image preview

When opening a buffer, if its filename matches a glob
(*.{gif,jpg,jpeg,png}) the resulting buffer will be read only with no
text inside. The contents of the file will be loaded into an 'image'
buffer-local property. The text area will check for this property and if
it exists, display the image.

* Make split configuration persistent

The editor will remember all split locations and what buffers were open
in which.

* Simplify XMode DTD

- Remove WHITESPACE rule
- Remove KEYWORDS.IGNORE_CASE attribute; instead, keywords will inherit
  the setting of the RULES.IGNORE_CASE attribute

* Change mode loading code

Currently, the first time jEdit is run, it loads all edit modes into
memory and writes out a 'mode cache' file. Subsequent launches only read
the mode cache and autoload modes as needed.

A consequence of this is that jEdit takes ages to start the first time
it is run. Not only is this annoying, it also gives users a bad first
impression.

The reason each mode has to be loaded to create the cache, is that vital
information, such as the mode's name, filename glob and first line glob
is emedded in the mode file.

However, if this information is moved out to a 'catalog' file, leaving
only highlighting rules in the mode file, loading all edit modes at once
will never be required.

A catalog file could look like so:

<MODES>
  <MODE NAME="java" FILENAME_GLOB="*.java" GRAMMAR="java.xml" />
  <MODE NAME="shellscript" FIRSTLINE_GLOB="#!*sh*" GRAMMAR="shellscript.xml" />
  ... and so on ...
</MODES>

So basically, a catalog is a manually-created mode cache.

* More edit modes

- M4
- Troff
- TeXinfo
- Verilog (use VerilogTokenMarker in Jext as a reference)

* Faster HyperSearch

When searching a directory, instead of loading each file into memory
entirely, HyperSearch will read them from an input stream. This will
speed things up a lot.

* Minor changes

- The File->Current Directory menu will not list backups and autosaves.

- All available fonts will be shown in the font selector.

- The base Metal L&F font will be configurable.

- The abbrev option pane will edit the currently selected abbrev in a
  text area.

- When running with the Metal L&F, the docking area border will look
  like a split pane divider

- Search and replace: don't use search.{search,replace}.value properties

- Search and replace: getFlag()/setFlag() methods replace manual
  search.batch.value, search.keepDialog.value, etc property accesses

- Improve next/prev-paragraph commands

* UI changes

I think the marker commands should be moved from the 'Search' menu to an
'Edit->Markers' submenu. The 'clear marker' and 'go to marker' submenus
will be replaced with commands that display a list dialog box. I haven't
decided what keyboard shortcuts these commands will have yet.

The Edit menu should be simplified. The 'Selection', 'Lines',
'Paragraphs' and 'Brackets' submenus should be merged and reorganized
into 'Text' and 'Source Code' submenus.

* API changes

Deprecation will be used to prevent breaking plugins directly.

-- Slava Pestov <sp@gjt.org>
