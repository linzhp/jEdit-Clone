JEDIT TO DO

Bracket highlighting is broken by forward-delete and other
commands which change the document without changing the
caret position

------- Stuff for 2.3pre2 -------

- Finish documentation updates
- 'File->Current Directory' menu lists files in $d
- CaretUndo acts weird on 'redo' sometimes
- Need to redo window-editor-* snapshots in icewm
- Need to redo dialog-options-* snapshots as well

------- Stuff for 2.3pre3+ -------

- 'Uncomment' command, removes comment strings from selected text
- HyperSearch - when doing a directory search, all buffers with matches
  are kept open, they should be closed
  - to fix this, HyperSearch should check if getNextBuffer() returns a
    temporary buffer, if so, it shouldn't create any positions, and
    instead wait for the buffer created event (if there will be one)
  - if the buffer is not temporary, create positions cos it's going stay
    open
- Beef up 'Marker' class to support this sort of file/line number/message
  thing, EditBus will also use it for errors
- Double-click/drag
- better ignore case, regexp icons
- Integrate Mike Dillon's "Gutter" code, rename TextAreaPainter.Highlight
  to TextAreaHighlight and use that same interface to paint stuff in the
  gutter
- Clean way of embedding token markers in one another, so that HTMLTokenMarker
  can be used to color PHP, ASP, VBScript, etc in addition to JavaScript
  -- TokenMarker.markTokensImpl changed to:
     markTokensImpl(byte token, Segment line, int lineIndex, String end);
     -- Parent token marker stored in child's 'parent' instance var, for addToken()
  -- TokenMarker.delegate(TokenMarker tm, Segment line, int lineIndex, String end);
  -- LineInfo changed to:
     class LineInfo
     {
             byte token;
	     String end;
	     TokenMarker child;
     }
  -- markTokensImpl() can return Token.DELEGATE_END if it finds an 'end' token,
     it is then the job of the delegate() caller to add the end token
  -- markTokens() checks if lineInfo.child is valid, if so, immediately
     calls markTokensImpl() of child
  -- more than one level of embedding will require a major reworking of the
     syntax system, so don't do it for now
- Write an InputHandler subclass that displays the current repeat count,
  if any, in the view's status bar
- Document EditBus in plugin development docs
- complete-word shouldn't scan entire document every time a match needs
  to be completed, also storing view/textArea instances in actions is
  not a good idea
- insert-char performs indent on \n and \t. InputHandlers pass \n and \t
  to the input action. InputHandler.insert-{tab,break} removed.
- Macros -- \n, \t in action command
- Integrate BufferTabs into the core
- (??? WHY?) Higlight.paintHighlight(): instead of passing y co-ordinate,
  pass a rectangle with line bounds. Maybe rework TextAreaPainter internals
  to use a rectangle also, it could simplify some things. If one rectangle
  instance is stored and reused, it would not slow things down

------- Probably not in 2.3 -------

- Menu bar and tool bar loading needs to work outside of views
- Reverse search. Until gnu.regexp supports this, it can't be done very easily
- Integrate XMode
- Enhanced printing:
  - print selection only
  - print line numbers option

------- Installer -------

- Check version of existing 'simlaunch' program before overwriting
- Store human-readable strings in a property file for easier localization
- Bad file number I/O error - file descriptor leak somewhere?
- Create a homepage for it
